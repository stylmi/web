{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/pages/category/[slug]/index.js\";\nimport { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORY_POST } from 'core/graphql/CategoryPost.query';\nimport { CURRENCY } from '../../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../../../hoc/withLayout';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../../../components/Loader/CardLoader';\nimport PostCard from '../../../components/PostCard';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\nimport PageMeta from '../../../components/PageMeta';\nimport { withApollo } from '../../../helpers/apollo';\n\nconst SingleCategory = ({\n  data,\n  loading,\n  fetchMore,\n  limit\n}) => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const fetchedCategoryPost = data && data.category ? data.category.posts.data : [];\n  const postCount = fetchedCategoryPost.length;\n  const totalPost = data && data.category ? data.category.posts.total : null;\n  const categoryName = data && data.category ? data.category.name : null;\n\n  const renderCategoryPost = item => {\n    const {\n      title,\n      price = `0.00`,\n      slug,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      href: `${SINGLE_POST_PAGE}/[slug]`,\n      as: `${SINGLE_POST_PAGE}/${slug}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(PostCard, {\n          currency: CURRENCY,\n          title: title,\n          price: price,\n          imageSrc: [url, largeUrl]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 50,\n    mb: 50,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        content: categoryName,\n        mb: 40,\n        style: {\n          fontSize: 24,\n          fontWeight: 600,\n          color: '#333333'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), !fetchedCategoryPost ? /*#__PURE__*/_jsxDEV(NoItemFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ListGrid, {\n        data: fetchedCategoryPost,\n        totalPost: totalPost,\n        postCount: postCount,\n        columnWidth: [1, 1 / 2, 1 / 4],\n        component: renderCategoryPost,\n        loading: loading ? loading : loadingMore,\n        isLoading: loadingMore,\n        placeholder: /*#__PURE__*/_jsxDEV(CardLoader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, this),\n        limit: limit,\n        handleLoadMore: loading => {\n          toggleLoading(true);\n          paginate(page + 1);\n          fetchMore({\n            variables: {\n              page: page + 1\n            },\n            updateQuery: (prev, {\n              fetchMoreResult\n            }) => {\n              if (!fetchMoreResult) {\n                toggleLoading(false);\n                return prev;\n              }\n\n              const oldPosts = prev.category.posts.data;\n              const newPosts = fetchMoreResult.category.posts.data;\n\n              if (postCount && totalPost) {\n                if (postCount <= totalPost) {\n                  toggleLoading(false);\n                  const concatedPosts = oldPosts.concat(newPosts);\n                  fetchMoreResult.category.posts.data = concatedPosts;\n                  return fetchMoreResult;\n                }\n              }\n            }\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withApollo(withLayout(() => {\n  const {\n    query: {\n      slug\n    }\n  } = useRouter();\n  let QUERY_VARIABLES = {\n    SLUG: slug,\n    LIMIT: 20,\n    location: \"\",\n    locationFeild: ''\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_CATEGORY_POST, {\n    variables: QUERY_VARIABLES\n  });\n  console.log(\"data\", data);\n  if (error) return /*#__PURE__*/_jsxDEV(OnError, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 23\n  }, this);\n  const {\n    name\n  } = data && data.category ? data.category : '';\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageMeta, {\n      title: name,\n      description: \"Product categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SingleCategory, {\n      data: data,\n      loading: loading,\n      fetchMore: fetchMore,\n      limit: QUERY_VARIABLES.LIMIT\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 7\n  }, this);\n}));","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/pages/category/[slug]/index.js"],"names":["Fragment","useState","useRouter","Link","Grid","useQuery","GET_CATEGORY_POST","CURRENCY","SINGLE_POST_PAGE","withLayout","Box","Heading","ListGrid","CardLoader","PostCard","NoItemFound","OnError","PageMeta","withApollo","SingleCategory","data","loading","fetchMore","limit","loadingMore","toggleLoading","page","paginate","fetchedCategoryPost","category","posts","postCount","length","totalPost","total","categoryName","name","renderCategoryPost","item","title","price","slug","image","url","largeUrl","fontSize","fontWeight","color","variables","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","concatedPosts","concat","query","QUERY_VARIABLES","SLUG","LIMIT","location","locationFeild","error","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,OAAnC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,GAAP,MAAgB,4BAAhB;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AACA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA;AAA5B,CAAD,KAAyC;AAC9D,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAA+BxB,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAM;AAAA,OAACyB,IAAD;AAAA,OAAOC;AAAP,MAAmB1B,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM2B,mBAAmB,GACvBR,IAAI,IAAIA,IAAI,CAACS,QAAb,GAAwBT,IAAI,CAACS,QAAL,CAAcC,KAAd,CAAoBV,IAA5C,GAAmD,EADrD;AAEA,QAAMW,SAAS,GAAGH,mBAAmB,CAACI,MAAtC;AACA,QAAMC,SAAS,GAAGb,IAAI,IAAIA,IAAI,CAACS,QAAb,GAAwBT,IAAI,CAACS,QAAL,CAAcC,KAAd,CAAoBI,KAA5C,GAAoD,IAAtE;AACA,QAAMC,YAAY,GAAGf,IAAI,IAAIA,IAAI,CAACS,QAAb,GAAwBT,IAAI,CAACS,QAAL,CAAcO,IAAtC,GAA6C,IAAlE;;AAEA,QAAMC,kBAAkB,GAAGC,IAAI,IAAI;AACjC,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,KAAK,GAAI,MAFL;AAGJC,MAAAA,IAHI;AAIJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP;AAJH,QAKFN,IALJ;AAMA,wBACE,QAAC,IAAD;AACE,MAAA,IAAI,EAAG,GAAE9B,gBAAiB,SAD5B;AAEE,MAAA,EAAE,EAAG,GAAEA,gBAAiB,IAAGiC,IAAK,EAFlC;AAAA,6BAIE;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,QAAQ,EAAElC,QADZ;AAEE,UAAA,KAAK,EAAEgC,KAFT;AAGE,UAAA,KAAK,EAAEC,KAHT;AAIE,UAAA,QAAQ,EAAE,CAACG,GAAD,EAAMC,QAAN;AAJZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YADF;AAeD,GAtBD;;AAuBA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAA,2BACE,QAAC,IAAD;AAAA,8BACE,QAAC,OAAD;AACE,QAAA,OAAO,EAAET,YADX;AAEE,QAAA,EAAE,EAAE,EAFN;AAGE,QAAA,KAAK,EAAE;AAAEU,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,UAAU,EAAE,GAA5B;AAAiCC,UAAAA,KAAK,EAAE;AAAxC;AAHT;AAAA;AAAA;AAAA;AAAA,cADF,EAMG,CAACnB,mBAAD,gBACC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,QAAD;AACE,QAAA,IAAI,EAAEA,mBADR;AAEE,QAAA,SAAS,EAAEK,SAFb;AAGE,QAAA,SAAS,EAAEF,SAHb;AAIE,QAAA,WAAW,EAAE,CAAC,CAAD,EAAI,IAAI,CAAR,EAAW,IAAI,CAAf,CAJf;AAKE,QAAA,SAAS,EAAEM,kBALb;AAME,QAAA,OAAO,EAAEhB,OAAO,GAAGA,OAAH,GAAaG,WAN/B;AAOE,QAAA,SAAS,EAAEA,WAPb;AAQE,QAAA,WAAW,eAAE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBARf;AASE,QAAA,KAAK,EAAED,KATT;AAUE,QAAA,cAAc,EAAEF,OAAO,IAAI;AACzBI,UAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,UAAAA,QAAQ,CAACD,IAAI,GAAG,CAAR,CAAR;AACAJ,UAAAA,SAAS,CAAC;AACR0B,YAAAA,SAAS,EAAE;AACTtB,cAAAA,IAAI,EAAEA,IAAI,GAAG;AADJ,aADH;AAIRuB,YAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,cAAAA;AAAF,aAAP,KAA+B;AAC1C,kBAAI,CAACA,eAAL,EAAsB;AACpB1B,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACA,uBAAOyB,IAAP;AACD;;AACD,oBAAME,QAAQ,GAAGF,IAAI,CAACrB,QAAL,CAAcC,KAAd,CAAoBV,IAArC;AACA,oBAAMiC,QAAQ,GAAGF,eAAe,CAACtB,QAAhB,CAAyBC,KAAzB,CAA+BV,IAAhD;;AACA,kBAAIW,SAAS,IAAIE,SAAjB,EAA4B;AAC1B,oBAAIF,SAAS,IAAIE,SAAjB,EAA4B;AAC1BR,kBAAAA,aAAa,CAAC,KAAD,CAAb;AACA,wBAAM6B,aAAa,GAAGF,QAAQ,CAACG,MAAT,CAAgBF,QAAhB,CAAtB;AACAF,kBAAAA,eAAe,CAACtB,QAAhB,CAAyBC,KAAzB,CAA+BV,IAA/B,GAAsCkC,aAAtC;AACA,yBAAOH,eAAP;AACD;AACF;AACF;AAnBO,WAAD,CAAT;AAqBD;AAlCH;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CAnFD;;AAqFA,eAAejC,UAAU,CACvBT,UAAU,CAAC,MAAM;AACf,QAAM;AACJ+C,IAAAA,KAAK,EAAE;AAAEf,MAAAA;AAAF;AADH,MAEFvC,SAAS,EAFb;AAGA,MAAIuD,eAAe,GAAG;AACpBC,IAAAA,IAAI,EAAEjB,IADc;AAEpBkB,IAAAA,KAAK,EAAE,EAFa;AAGpBC,IAAAA,QAAQ,EAAC,EAHW;AAIpBC,IAAAA,aAAa,EAAC;AAJM,GAAtB;AAMA,QAAM;AAAEzC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiByC,IAAAA,KAAjB;AAAwBxC,IAAAA;AAAxB,MAAsCjB,QAAQ,CAACC,iBAAD,EAAoB;AACtE0C,IAAAA,SAAS,EAAES;AAD2D,GAApB,CAApD;AAGJM,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB5C,IAApB;AACI,MAAI0C,KAAJ,EAAW,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,QAAM;AAAE1B,IAAAA;AAAF,MAAWhB,IAAI,IAAIA,IAAI,CAACS,QAAb,GAAwBT,IAAI,CAACS,QAA7B,GAAwC,EAAzD;AACA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEO,IAAjB;AAAuB,MAAA,WAAW,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,cAAD;AACE,MAAA,IAAI,EAAEhB,IADR;AAEE,MAAA,OAAO,EAAEC,OAFX;AAGE,MAAA,SAAS,EAAEC,SAHb;AAIE,MAAA,KAAK,EAAEmC,eAAe,CAACE;AAJzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5BS,CADa,CAAzB","sourcesContent":["import { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORY_POST } from 'core/graphql/CategoryPost.query';\nimport { CURRENCY } from '../../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../../../hoc/withLayout';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../../../components/Loader/CardLoader';\nimport PostCard from '../../../components/PostCard';\nimport NoItemFound from '../../../components/NoItemFound';\nimport OnError from '../../../components/OnError';\nimport PageMeta from '../../../components/PageMeta';\nimport { withApollo } from '../../../helpers/apollo';\nconst SingleCategory = ({ data, loading, fetchMore, limit }) => {\n  const [loadingMore, toggleLoading] = useState(false);\n  const [page, paginate] = useState(1);\n  const fetchedCategoryPost =\n    data && data.category ? data.category.posts.data : [];\n  const postCount = fetchedCategoryPost.length;\n  const totalPost = data && data.category ? data.category.posts.total : null;\n  const categoryName = data && data.category ? data.category.name : null;\n\n  const renderCategoryPost = item => {\n    const {\n      title,\n      price = `0.00`,\n      slug,\n      image: { url, largeUrl },\n    } = item;\n    return (\n      <Link\n        href={`${SINGLE_POST_PAGE}/[slug]`}\n        as={`${SINGLE_POST_PAGE}/${slug}`}\n      >\n        <a>\n          <PostCard\n            currency={CURRENCY}\n            title={title}\n            price={price}\n            imageSrc={[url, largeUrl]}\n          />\n        </a>\n      </Link>\n    );\n  };\n  return (\n    <Box mt={50} mb={50}>\n      <Grid>\n        <Heading\n          content={categoryName}\n          mb={40}\n          style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n        />\n        {!fetchedCategoryPost ? (\n          <NoItemFound />\n        ) : (\n          <ListGrid\n            data={fetchedCategoryPost}\n            totalPost={totalPost}\n            postCount={postCount}\n            columnWidth={[1, 1 / 2, 1 / 4]}\n            component={renderCategoryPost}\n            loading={loading ? loading : loadingMore}\n            isLoading={loadingMore}\n            placeholder={<CardLoader />}\n            limit={limit}\n            handleLoadMore={loading => {\n              toggleLoading(true);\n              paginate(page + 1);\n              fetchMore({\n                variables: {\n                  page: page + 1,\n                },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) {\n                    toggleLoading(false);\n                    return prev;\n                  }\n                  const oldPosts = prev.category.posts.data;\n                  const newPosts = fetchMoreResult.category.posts.data;\n                  if (postCount && totalPost) {\n                    if (postCount <= totalPost) {\n                      toggleLoading(false);\n                      const concatedPosts = oldPosts.concat(newPosts);\n                      fetchMoreResult.category.posts.data = concatedPosts;\n                      return fetchMoreResult;\n                    }\n                  }\n                },\n              });\n            }}\n          />\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default withApollo(\n  withLayout(() => {\n    const {\n      query: { slug },\n    } = useRouter();\n    let QUERY_VARIABLES = {\n      SLUG: slug,\n      LIMIT: 20,\n      location:\"\",\n      locationFeild:''\n    };\n    const { data, loading, error, fetchMore } = useQuery(GET_CATEGORY_POST, {\n      variables: QUERY_VARIABLES,\n    });\nconsole.log(\"data\", data)\n    if (error) return <OnError />;\n\n    const { name } = data && data.category ? data.category : '';\n    return (\n      <Fragment>\n        <PageMeta title={name} description=\"Product categories\" />\n        <SingleCategory\n          data={data}\n          loading={loading}\n          fetchMore={fetchMore}\n          limit={QUERY_VARIABLES.LIMIT}\n        />\n      </Fragment>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}