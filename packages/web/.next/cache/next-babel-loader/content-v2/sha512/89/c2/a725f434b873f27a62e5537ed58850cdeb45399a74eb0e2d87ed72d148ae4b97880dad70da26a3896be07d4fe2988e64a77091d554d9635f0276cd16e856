{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getThumbUrl } from './generateThumbUrl';\nimport { storage } from './init';\n/**\r\n * Helper functions to upload multiple image to firebase storage\r\n * @param {Array} images\r\n */\n\nexport function uploadMultipleImages(_x) {\n  return _uploadMultipleImages.apply(this, arguments);\n}\n\nfunction _uploadMultipleImages() {\n  _uploadMultipleImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(images) {\n    var allImages, uploadedImages;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            allImages = [];\n\n            storage.ref().constructor.prototype.putFiles = function (files) {\n              var ref = this;\n              return Promise.all(files.map(function (file) {\n                return ref.child(file.name).put(file);\n              }));\n            };\n\n            _context2.next = 4;\n            return storage.ref().putFiles(images).then(function (metadatas) {\n              return metadatas;\n            });\n\n          case 4:\n            uploadedImages = _context2.sent;\n            return _context2.abrupt(\"return\", Promise.all(uploadedImages.map(function (snapshot) {\n              return new Promise( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                            var thumbUrl = getThumbUrl(downloadURL);\n                            allImages.push({\n                              url: thumbUrl,\n                              largeUrl: downloadURL\n                            });\n                          });\n\n                        case 2:\n                          resolve(allImages);\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2, _x3) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n            })));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _uploadMultipleImages.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/helpers/uploadMultipleImage.js"],"names":["getThumbUrl","storage","uploadMultipleImages","images","allImages","ref","constructor","prototype","putFiles","files","Promise","all","map","file","child","name","put","then","metadatas","uploadedImages","snapshot","resolve","reject","getDownloadURL","downloadURL","thumbUrl","push","url","largeUrl"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA;AACA;AACA;AACA;;AACA,gBAAsBC,oBAAtB;AAAA;AAAA;;;mFAAO,kBAAoCC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,SADC,GACW,EADX;;AAELH,YAAAA,OAAO,CAACI,GAAR,GAAcC,WAAd,CAA0BC,SAA1B,CAAoCC,QAApC,GAA+C,UAASC,KAAT,EAAgB;AAC7D,kBAAIJ,GAAG,GAAG,IAAV;AACA,qBAAOK,OAAO,CAACC,GAAR,CACLF,KAAK,CAACG,GAAN,CAAU,UAASC,IAAT,EAAe;AACvB,uBAAOR,GAAG,CAACS,KAAJ,CAAUD,IAAI,CAACE,IAAf,EAAqBC,GAArB,CAAyBH,IAAzB,CAAP;AACD,eAFD,CADK,CAAP;AAKD,aAPD;;AAFK;AAAA,mBAUwBZ,OAAO,CACjCI,GAD0B,GAE1BG,QAF0B,CAEjBL,MAFiB,EAG1Bc,IAH0B,CAGrB,UAASC,SAAT,EAAoB;AACxB,qBAAOA,SAAP;AACD,aAL0B,CAVxB;;AAAA;AAUCC,YAAAA,cAVD;AAAA,8CAiBET,OAAO,CAACC,GAAR,CACLQ,cAAc,CAACP,GAAf,CAAmB,UAAAQ,QAAQ,EAAI;AAC7B,qBAAO,IAAIV,OAAJ;AAAA,oFAAY,iBAAOW,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACXF,QAAQ,CAACf,GAAT,CAAakB,cAAb,GAA8BN,IAA9B,CAAmC,UAASO,WAAT,EAAsB;AAC7D,gCAAMC,QAAQ,GAAGzB,WAAW,CAACwB,WAAD,CAA5B;AACApB,4BAAAA,SAAS,CAACsB,IAAV,CAAe;AACbC,8BAAAA,GAAG,EAAEF,QADQ;AAEbG,8BAAAA,QAAQ,EAAEJ;AAFG,6BAAf;AAID,2BANK,CADW;;AAAA;AAQjBH,0BAAAA,OAAO,CAACjB,SAAD,CAAP;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,kBAAP;AAUD,aAXD,CADK,CAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { getThumbUrl } from './generateThumbUrl';\r\nimport { storage } from './init';\r\n\r\n/**\r\n * Helper functions to upload multiple image to firebase storage\r\n * @param {Array} images\r\n */\r\nexport async function uploadMultipleImages(images) {\r\n  let allImages = [];\r\n  storage.ref().constructor.prototype.putFiles = function(files) {\r\n    var ref = this;\r\n    return Promise.all(\r\n      files.map(function(file) {\r\n        return ref.child(file.name).put(file);\r\n      })\r\n    );\r\n  };\r\n  const uploadedImages = await storage\r\n    .ref()\r\n    .putFiles(images)\r\n    .then(function(metadatas) {\r\n      return metadatas;\r\n    });\r\n\r\n  return Promise.all(\r\n    uploadedImages.map(snapshot => {\r\n      return new Promise(async (resolve, reject) => {\r\n        await snapshot.ref.getDownloadURL().then(function(downloadURL) {\r\n          const thumbUrl = getThumbUrl(downloadURL);\r\n          allImages.push({\r\n            url: thumbUrl,\r\n            largeUrl: downloadURL,\r\n          });\r\n        });\r\n        resolve(allImages);\r\n      });\r\n    })\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}