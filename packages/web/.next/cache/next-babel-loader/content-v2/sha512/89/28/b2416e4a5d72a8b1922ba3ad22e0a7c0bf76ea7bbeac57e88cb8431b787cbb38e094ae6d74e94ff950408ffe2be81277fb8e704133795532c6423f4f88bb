{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/containers/Home/PostByLocation/index.js\";\nimport React, { useContext, useState } from \"react\";\nimport Link from \"next/link\";\nimport { CURRENCY } from \"../../../Config\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_NEAREST_POST } from \"core/graphql/NearestPost.query\";\nimport { LOCATION_POST_PAGE, SINGLE_POST_PAGE } from \"core/navigation/constant\";\nimport { PostLoader } from \"../../../components/Placeholder\";\nimport ListGrid from \"reusecore/src/elements/ListGrid\";\nimport Box from \"reusecore/src/elements/Box\";\nimport Heading from \"reusecore/src/elements/Heading\";\nimport Button from \"reusecore/src/elements/Button\";\nimport PostCard from \"../../../components/PostCard\";\nimport NoItemFound from \"../../../components/NoItemFound\";\nimport OnError from \"../../../components/OnError\";\nimport { LocationContext } from \"../../../contexts/HomepageContext\";\nimport { GET_POST_BY_LOCATION } from \"../../../../core/graphql/Post.query\";\n\nconst PostByLocation = ({\n  getLocation\n}) => {\n  const {\n    location\n  } = useContext(LocationContext); // QUERY SECTION\n\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const searchLocation = location.startsWith(\"All \") ? location.split(\" \")[1] : location;\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const QUERY_VARIABLES = {\n    page: 1,\n    LIMIT: 12,\n    location: searchLocation\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_POST_BY_LOCATION, {\n    variables: QUERY_VARIABLES\n  }); // Error Rendering.\n\n  if (error) return /*#__PURE__*/_jsxDEV(OnError, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 21\n  }, this); // Extract Post Data\n\n  const postCount = data && data.locationPosts && data.locationPosts.data ? data.locationPosts.data.length : 1;\n  const locationPost = data && data.locationPosts && data.locationPosts.data ? data.locationPosts.data : [];\n  const totalPost = data && data.locationPosts ? data.locationPosts.total : 1; // Post Loop Control Area\n\n  const renderLocationPost = item => {\n    const {\n      price,\n      image: {\n        url,\n        largeUrl\n      },\n      title,\n      slug\n    } = item;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      href: `${SINGLE_POST_PAGE}/[slug]`,\n      as: `${SINGLE_POST_PAGE}/${slug}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(PostCard, {\n          currency: CURRENCY,\n          title: title,\n          price: price,\n          imageSrc: [url, largeUrl]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      flexBox: true,\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Heading, {\n        content: `Products in ${location}`,\n        mb: 0,\n        fontSize: 20,\n        fontWeight: 600\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 20,\n      children: !locationPost ? /*#__PURE__*/_jsxDEV(NoItemFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ListGrid, {\n        data: locationPost,\n        columnWidth: [1, 1 / 2, 1 / 3, 1 / 4],\n        limit: QUERY_VARIABLES.LIMIT,\n        component: renderLocationPost,\n        loading: loading,\n        placeholder: /*#__PURE__*/_jsxDEV(PostLoader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 26\n        }, this),\n        handleLoadMore: () => {\n          toggleLoading(true);\n          paginate(page + 1);\n          fetchMore({\n            variables: {\n              page: page + 1\n            },\n            updateQuery: (prev, {\n              fetchMoreResult\n            }) => {\n              if (!fetchMoreResult) {\n                toggleLoading(false);\n                return prev;\n              }\n\n              if (postCount && totalPost) {\n                if (postCount <= totalPost) {\n                  toggleLoading(false);\n                  return Object.assign({}, prev, {\n                    posts: {\n                      data: [...prev.locationPosts.data, ...fetchMoreResult.locationPosts.data],\n                      total: totalPost\n                    }\n                  });\n                }\n              }\n            }\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default PostByLocation;","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/containers/Home/PostByLocation/index.js"],"names":["React","useContext","useState","Link","CURRENCY","useQuery","GET_NEAREST_POST","LOCATION_POST_PAGE","SINGLE_POST_PAGE","PostLoader","ListGrid","Box","Heading","Button","PostCard","NoItemFound","OnError","LocationContext","GET_POST_BY_LOCATION","PostByLocation","getLocation","location","loadingMore","toggleLoading","searchLocation","startsWith","split","page","paginate","QUERY_VARIABLES","LIMIT","data","loading","error","fetchMore","variables","postCount","locationPosts","length","locationPost","totalPost","total","renderLocationPost","item","price","image","url","largeUrl","title","slug","updateQuery","prev","fetchMoreResult","Object","assign","posts"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport Link from \"next/link\";\nimport { CURRENCY } from \"../../../Config\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_NEAREST_POST } from \"core/graphql/NearestPost.query\";\nimport { LOCATION_POST_PAGE, SINGLE_POST_PAGE } from \"core/navigation/constant\";\nimport { PostLoader } from \"../../../components/Placeholder\";\nimport ListGrid from \"reusecore/src/elements/ListGrid\";\nimport Box from \"reusecore/src/elements/Box\";\nimport Heading from \"reusecore/src/elements/Heading\";\nimport Button from \"reusecore/src/elements/Button\";\nimport PostCard from \"../../../components/PostCard\";\nimport NoItemFound from \"../../../components/NoItemFound\";\nimport OnError from \"../../../components/OnError\";\nimport { LocationContext } from \"../../../contexts/HomepageContext\";\nimport { GET_POST_BY_LOCATION } from \"../../../../core/graphql/Post.query\";\n\nconst PostByLocation = ({ getLocation }) => {\n  const { location } = useContext(LocationContext);\n  // QUERY SECTION\n  const [loadingMore, toggleLoading] = useState(false);\n  const searchLocation = location.startsWith(\"All \")? location.split(\" \")[1]: location\n  const [page, paginate] = useState(1);\n  const QUERY_VARIABLES = {\n    page: 1,\n    LIMIT: 12,\n    location: searchLocation,\n  };\n  const { data, loading, error, fetchMore } = useQuery(GET_POST_BY_LOCATION, {\n    variables: QUERY_VARIABLES,\n  });\n\n  // Error Rendering.\n  if (error) return <OnError />;\n  // Extract Post Data\n  const postCount =\n    data && data.locationPosts && data.locationPosts.data\n      ? data.locationPosts.data.length\n      : 1;\n  const locationPost =\n    data && data.locationPosts && data.locationPosts.data\n      ? data.locationPosts.data\n      : [];\n  const totalPost = data && data.locationPosts ? data.locationPosts.total : 1;\n\n  // Post Loop Control Area\n  const renderLocationPost = (item) => {\n    const {\n      price,\n      image: { url, largeUrl },\n      title,\n      slug,\n    } = item;\n    return (\n      <Link\n        href={`${SINGLE_POST_PAGE}/[slug]`}\n        as={`${SINGLE_POST_PAGE}/${slug}`}\n      >\n        <a>\n          <PostCard\n            currency={CURRENCY}\n            title={title}\n            price={price}\n            imageSrc={[url, largeUrl]}\n          />\n        </a>\n      </Link>\n    );\n  };\n\n  return (\n    <>\n      <Box flexBox justifyContent=\"space-between\" alignItems=\"center\">\n        <Heading\n          content={`Products in ${location}`}\n          mb={0}\n          fontSize={20}\n          fontWeight={600}\n        />\n      </Box>\n      <Box mt={20}>\n        {!locationPost ? (\n          <NoItemFound />\n        ) : (\n          <ListGrid\n            data={locationPost}\n            columnWidth={[1, 1 / 2, 1 / 3, 1 / 4]}\n            limit={QUERY_VARIABLES.LIMIT}\n            component={renderLocationPost}\n            loading={loading}\n            placeholder={<PostLoader />}\n            handleLoadMore={() => {\n              toggleLoading(true);\n              paginate(page + 1);\n              fetchMore({\n                variables: {\n                  page: page + 1,\n                },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) {\n                    toggleLoading(false);\n                    return prev;\n                  }\n                  if (postCount && totalPost) {\n                    if (postCount <= totalPost) {\n                      toggleLoading(false);\n                      return Object.assign({}, prev, {\n                        posts: {\n                          data: [\n                            ...prev.locationPosts.data,\n                            ...fetchMoreResult.locationPosts.data,\n                          ],\n                          total: totalPost,\n                        },\n                      });\n                    }\n                  }\n                },\n              });\n            }}\n          />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default PostByLocation;\n"]},"metadata":{},"sourceType":"module"}