{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\web\\\\components\\\\InputGooglePlace\\\\altered.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nconst LocationSearchInput = props => {\n  const handleSelect = selected => {\n    const address = selected;\n    props.handleAddress(address);\n    geocodeByAddress(selected).then(results => getLatLng(results[0])).then(latLng => props.handleLocation(latLng, address)).catch(error => console.error('Error', error));\n  };\n\n  const handleCloseClick = () => {\n    setAddressState(_objectSpread(_objectSpread({}, addressState), {}, {\n      address: ''\n    }));\n  };\n\n  return __jsx(PlacesAutocomplete, {\n    value: props.address,\n    onChange: props.handleChange,\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => __jsx(LocationWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(Input, _extends({}, getInputProps(), {\n    required: \"required\",\n    label: \"Location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }))), props.address && __jsx(SearchResultWrapper, {\n    className: \"autocomplete-dropdown-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, loading && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 27\n    }\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: '#e2e2e2'\n    } : {\n      backgroundColor: '#ffffff'\n    };\n    return __jsx(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, suggestion.description));\n  }))));\n};\n\nexport default LocationSearchInput;","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/components/InputGooglePlace/altered.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Input","LocationWrapper","SearchResultWrapper","LocationSearchInput","props","handleSelect","selected","address","handleAddress","then","results","latLng","handleLocation","catch","error","console","handleCloseClick","setAddressState","addressState","handleChange","getInputProps","suggestions","getSuggestionItemProps","loading","map","suggestion","className","active","style","backgroundColor","description"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,eAAP,IAA0BC,mBAA1B,QAAqD,SAArD;;AAEA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAMC,YAAY,GAAGC,QAAQ,IAAI;AAC/B,UAAMC,OAAO,GAAGD,QAAhB;AACAF,IAAAA,KAAK,CAACI,aAAN,CAAoBD,OAApB;AACAT,IAAAA,gBAAgB,CAACQ,QAAD,CAAhB,CACGG,IADH,CACQC,OAAO,IAAIX,SAAS,CAACW,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQE,MAAM,IAAIP,KAAK,CAACQ,cAAN,CAAqBD,MAArB,EAA6BJ,OAA7B,CAFlB,EAGGM,KAHH,CAGSC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHlB;AAID,GAPD;;AASA,QAAME,gBAAgB,GAAG,MAAM;AAC7BC,IAAAA,eAAe,iCAAMC,YAAN;AAAoBX,MAAAA,OAAO,EAAE;AAA7B,OAAf;AACD,GAFD;;AAIA,SACE,MAAC,kBAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAACG,OADf;AAEE,IAAA,QAAQ,EAAEH,KAAK,CAACe,YAFlB;AAGE,IAAA,QAAQ,EAAEd,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AAAEe,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,KACC,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,eAAWH,aAAa,EAAxB;AAA4B,IAAA,QAAQ,EAAC,UAArC;AAAgD,IAAA,KAAK,EAAC,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,EAOGhB,KAAK,CAACG,OAAN,IACC,MAAC,mBAAD;AAAqB,IAAA,SAAS,EAAC,iCAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGgB,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGF,WAAW,CAACG,GAAZ,CAAgBC,UAAU,IAAI;AAC7B,UAAMC,SAAS,GAAGD,UAAU,CAACE,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD6B,CAI7B;;AACA,UAAMC,KAAK,GAAGH,UAAU,CAACE,MAAX,GACV;AACEE,MAAAA,eAAe,EAAE;AADnB,KADU,GAIV;AACEA,MAAAA,eAAe,EAAE;AADnB,KAJJ;AAOA,WACE,0BACMP,sBAAsB,CAACG,UAAD,EAAa;AACrCC,MAAAA,SADqC;AAErCE,MAAAA;AAFqC,KAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOH,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,GAtBA,CAFH,CARJ,CANJ,CADF;AA8CD,CA5DD;;AA8DA,eAAe3B,mBAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\n\r\nimport Input from '../Input';\r\nimport LocationWrapper, { SearchResultWrapper } from './style';\r\n\r\nconst LocationSearchInput = props => {\r\n  const handleSelect = selected => {\r\n    const address = selected;\r\n    props.handleAddress(address);\r\n    geocodeByAddress(selected)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => props.handleLocation(latLng, address))\r\n      .catch(error => console.error('Error', error));\r\n  };\r\n\r\n  const handleCloseClick = () => {\r\n    setAddressState({ ...addressState, address: '' });\r\n  };\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      value={props.address}\r\n      onChange={props.handleChange}\r\n      onSelect={handleSelect}\r\n    >\r\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <LocationWrapper>\r\n          <div>\r\n            <Input {...getInputProps()} required=\"required\" label=\"Location\" />\r\n            {/* {addressState.address.length > 0 && (\r\n                <button onClick={handleCloseClick}>x</button>\r\n              )} */}\r\n          </div>\r\n          {props.address && (\r\n            <SearchResultWrapper className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                // inline style for demonstration purpose\r\n                const style = suggestion.active\r\n                  ? {\r\n                      backgroundColor: '#e2e2e2',\r\n                    }\r\n                  : {\r\n                      backgroundColor: '#ffffff',\r\n                    };\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                      style,\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </SearchResultWrapper>\r\n          )}\r\n        </LocationWrapper>\r\n      )}\r\n    </PlacesAutocomplete>\r\n  );\r\n};\r\n\r\nexport default LocationSearchInput;\r\n"]},"metadata":{},"sourceType":"module"}