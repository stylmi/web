{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\web\\\\containers\\\\SinglePost\\\\Description\\\\index.js\";\nimport React, { Fragment, useState } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport Tag, { TagGroup, LabelTag } from '../../../components/TagGroup';\nimport { openModal } from '@redq/reuse-modal';\nimport ShareModal from '../../ModalContainer/ShareModal';\nimport LoginModal from '../../ModalContainer/LoginModal';\nimport ContactInfoModal from '../../ModalContainer/ContactInfoModal';\nimport { CURRENCY } from '../../../Config';\nimport { useMutation } from '@apollo/react-hooks';\nimport { HANDLE_FAV } from '../../../../core/graphql/Mutations';\nimport AuthHelper from '../../../helpers/authHelper';\nimport AddressBox from '../../../components/AddressBox';\nimport Text from '../../../../reusecore/src/elements/Text';\nimport Icon from '../../../components/Icon';\nimport Button from '../../../../reusecore/src/elements/Button';\nimport InfoBox from '../../../components/UserInfoBox';\nimport ReadMore from '../../../components/Truncate';\nimport { ADD_POST, SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport { DescriptionBlock, AlignCenterWrapper, InfoBoxWrapper, ButtonWrapper } from './description.style';\n\nconst timeFormatAMPM = date => {\n  return date.toLocaleString('en-US', {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nconst Description = ({\n  postData,\n  isLoggedIn,\n  userId\n}) => {\n  let userFavList = [];\n  let userNewFavList = [];\n  let publishTime = '';\n  const {\n    0: btnLoading,\n    1: setBtnLoading\n  } = useState(false);\n  const favouritedBy = postData && postData.favouritedBy ? postData.favouritedBy : [];\n  const contactNumber = postData && postData.contactNumber ? postData.contactNumber : '';\n  const authorImage = postData.author && postData.author.image && postData.author.image.url ? postData.author.image.url : null;\n  const authorFallbackImage = postData.author && postData.author.image && postData.author.image.largeUrl ? postData.author.image.largeUrl : null;\n\n  if (favouritedBy.includes(userId)) {\n    userFavList.push({\n      id: postData.id\n    });\n  }\n\n  const {\n    0: userFav,\n    1: setUserfav\n  } = useState(userFavList);\n\n  const isFavourite = (id, favList) => {\n    const favItem = favList.filter(item => item.id === id);\n\n    if (favItem.length) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isFav = isFavourite(postData.id, userFav);\n  const handleFavMutation = useMutation(HANDLE_FAV, {\n    variables: {\n      fav: {\n        id: userId,\n        postId: postData.id\n      }\n    }\n  });\n\n  const handleFavourite = async () => {\n    setBtnLoading(true);\n\n    if (isLoggedIn) {\n      await AuthHelper.refreshToken();\n    }\n\n    if (isLoggedIn) {\n      try {\n        const {\n          data\n        } = await handleFavMutation();\n        userNewFavList = data && data.handleFav && data.handleFav.data && data.handleFav.data.length ? data.handleFav.data : [];\n\n        if (userFav.length !== userNewFavList.length) {\n          setUserfav(userNewFavList);\n        }\n\n        setBtnLoading(false);\n      } catch (error) {\n        setBtnLoading(false);\n      }\n    } else {\n      setBtnLoading(false); // SHOW MODAL\n\n      openModal({\n        config: {\n          disableDragging: false,\n          minHeight: 'auto',\n          width: 'auto',\n          height: 'auto',\n          enableResizing: false,\n          disableDragging: true,\n          transition: {\n            tension: 150\n          }\n        },\n        springStyle: {\n          backgroundColor: '#ffffff',\n          overflowY: 'auto'\n        },\n        modalClass: 'customModal',\n        closeOnClickOutside: true,\n        component: LoginModal,\n        componentProps: {}\n      });\n    }\n  };\n\n  if (postData && postData.createdAt && postData.createdAt.seconds) {\n    const timeCalculation = new Date(postData.createdAt.seconds * 1000);\n    publishTime = timeFormatAMPM(timeCalculation);\n  } else if (postData && postData.createdAt && postData.createdAt._seconds) {\n    const timeCalculation = new Date(postData.createdAt._seconds * 1000);\n    publishTime = timeFormatAMPM(timeCalculation);\n  }\n\n  const adsCategory = (category, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      href: {\n        pathname: `${SINGLE_CATEGORY_PAGE}/${category.slug}`,\n        state: {\n          termId: category.id\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(Tag, {\n          tagContent: category.name,\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      content: postData.title,\n      as: \"span\",\n      fontSize: 18,\n      fontWeight: 600,\n      color: \"#333333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagGroup, {\n      marginBottom: \"25px\",\n      style: {\n        marginTop: 25,\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(LabelTag, {\n        tagContent: `${CURRENCY} ${postData.price}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), postData.isNegotiable && /*#__PURE__*/_jsxDEV(Text, {\n        content: \"Negotiable\",\n        as: \"span\",\n        fontSize: 14,\n        fontWeight: 400,\n        color: \"#595959\",\n        mb: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), postData && postData.distance ? /*#__PURE__*/_jsxDEV(AddressBox, {\n      distance: postData.distance ? `Approximately ${Math.floor(postData.distance)} km away` : '',\n      location: postData.formattedLocation ? postData.formattedLocation.formattedAddress : '',\n      style: {\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) // <p>Please Enable your location to get distance</p>\n    , /*#__PURE__*/_jsxDEV(Button, {\n      iconPosition: \"left\",\n      title: \"Show Contact\",\n      bg: \"#30C56D\",\n      style: {\n        marginBottom: 38,\n        width: '100%'\n      },\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"ios-call\",\n        fontSize: 19,\n        color: \"#fff\",\n        mr: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }, this),\n      onClick: () => openModal({\n        config: {\n          disableDragging: false,\n          className: 'contactModal',\n          width: 'auto',\n          height: 'auto',\n          enableResizing: false,\n          disableDragging: true,\n          transition: {\n            tension: 150\n          }\n        },\n        closeOnClickOutside: true,\n        component: ContactInfoModal,\n        componentProps: {\n          data: {\n            contactNumber: contactNumber\n          }\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoBoxWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n        imgWidth: \"45px\",\n        imgHeight: \"45px\",\n        imgRadius: 30,\n        source: [authorImage, authorFallbackImage],\n        title: postData && postData.author && postData.author.name ? postData.author.name : '',\n        author: postData.authorId,\n        postedTime: publishTime !== '' ? `Ad posted at ${publishTime}` : '',\n        style: {\n          flexGrow: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        style: {\n          flexGrow: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          icon: /*#__PURE__*/_jsxDEV(Icon, {\n            name: \"ios-share-alt\",\n            fontSize: 18,\n            color: \"#8C8C8C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 19\n          }, this),\n          height: 40,\n          width: 40,\n          className: \"outlineButton\",\n          style: {\n            marginRight: 10,\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: '#e2e2e2',\n            minHeight: 'auto',\n            minWidth: 'auto'\n          },\n          onClick: () => openModal({\n            config: {\n              disableDragging: false,\n              className: 'shareModal',\n              width: 'auto',\n              height: 'auto',\n              enableResizing: false,\n              disableDragging: true,\n              transition: {\n                tension: 150\n              }\n            },\n            withRnd: false,\n            closeOnClickOutside: true,\n            component: ShareModal,\n            componentProps: {\n              data: {\n                author: postData.author.name,\n                link: false ? window.location.href : null,\n                title: postData.title\n              }\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          className: \"outlineButton\",\n          isLoading: btnLoading,\n          icon: /*#__PURE__*/_jsxDEV(Icon, {\n            name: \"ios-heart\",\n            fontSize: 18,\n            color: isFav ? '#30C56D' : '#8C8C8C'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this),\n          height: 40,\n          width: 40,\n          style: {\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            borderColor: isFav ? '#30C56D' : '#e2e2e2',\n            minHeight: 'auto',\n            minWidth: 'auto',\n            padding: 0\n          },\n          onClick: handleFavourite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      content: \"Description\",\n      fontSize: 16,\n      fontFamily: \"Poppins\",\n      fontWeight: 600,\n      color: \"#333333\",\n      mb: 15,\n      style: {\n        display: 'inline-block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), postData && /*#__PURE__*/_jsxDEV(Tag, {\n      bgColor: postData.condition ? '#00b6ff' : '#30C56D',\n      tagContent: postData.condition ? 'New' : 'Used',\n      size: \"14px\",\n      tagColor: \"#ffffff\",\n      style: {\n        marginLeft: 15,\n        fontWeight: 700\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AlignCenterWrapper, {\n      style: {\n        marginBottom: 15\n      },\n      children: /*#__PURE__*/_jsxDEV(DescriptionBlock, {\n        children: /*#__PURE__*/_jsxDEV(ReadMore, {\n          character: 150,\n          children: postData.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlignCenterWrapper, {\n      style: {\n        marginTop: 25,\n        marginBottom: 25\n      },\n      children: postData.categories && postData.categories.length ? postData.categories.map(adsCategory) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), isLoggedIn && postData.authorId && userId === postData.authorId ? /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Edit\",\n      variant: \"textButton\",\n      style: {\n        minHeight: 'auto',\n        minWidth: 'auto'\n      },\n      onClick: () => Router.push(`${ADD_POST}/${postData.id}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Description;","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/containers/SinglePost/Description/index.js"],"names":["React","Fragment","useState","Link","Router","Tag","TagGroup","LabelTag","openModal","ShareModal","LoginModal","ContactInfoModal","CURRENCY","useMutation","HANDLE_FAV","AuthHelper","AddressBox","Text","Icon","Button","InfoBox","ReadMore","ADD_POST","SINGLE_CATEGORY_PAGE","DescriptionBlock","AlignCenterWrapper","InfoBoxWrapper","ButtonWrapper","timeFormatAMPM","date","toLocaleString","hour","minute","hour12","Description","postData","isLoggedIn","userId","userFavList","userNewFavList","publishTime","btnLoading","setBtnLoading","favouritedBy","contactNumber","authorImage","author","image","url","authorFallbackImage","largeUrl","includes","push","id","userFav","setUserfav","isFavourite","favList","favItem","filter","item","length","isFav","handleFavMutation","variables","fav","postId","handleFavourite","refreshToken","data","handleFav","error","config","disableDragging","minHeight","width","height","enableResizing","transition","tension","springStyle","backgroundColor","overflowY","modalClass","closeOnClickOutside","component","componentProps","createdAt","seconds","timeCalculation","Date","_seconds","adsCategory","category","index","pathname","slug","state","termId","name","marginRight","title","marginTop","price","isNegotiable","distance","Math","floor","formattedLocation","formattedAddress","marginBottom","className","authorId","flexGrow","borderWidth","borderStyle","borderColor","minWidth","withRnd","link","window","location","href","padding","display","condition","marginLeft","fontWeight","content","categories","map"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport Link from 'next/link';\r\nimport Router from 'next/router';\r\nimport Tag, { TagGroup, LabelTag } from '../../../components/TagGroup';\r\nimport { openModal } from '@redq/reuse-modal';\r\nimport ShareModal from '../../ModalContainer/ShareModal';\r\nimport LoginModal from '../../ModalContainer/LoginModal';\r\nimport ContactInfoModal from '../../ModalContainer/ContactInfoModal';\r\nimport { CURRENCY } from '../../../Config';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { HANDLE_FAV } from '../../../../core/graphql/Mutations';\r\nimport AuthHelper from '../../../helpers/authHelper';\r\nimport AddressBox from '../../../components/AddressBox';\r\nimport Text from '../../../../reusecore/src/elements/Text';\r\nimport Icon from '../../../components/Icon';\r\nimport Button from '../../../../reusecore/src/elements/Button';\r\nimport InfoBox from '../../../components/UserInfoBox';\r\nimport ReadMore from '../../../components/Truncate';\r\n\r\nimport { ADD_POST, SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\r\n\r\nimport {\r\n  DescriptionBlock,\r\n  AlignCenterWrapper,\r\n  InfoBoxWrapper,\r\n  ButtonWrapper,\r\n} from './description.style';\r\n\r\nconst timeFormatAMPM = date => {\r\n  return date.toLocaleString('en-US', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n};\r\nconst Description = ({ postData, isLoggedIn, userId }) => {\r\n  let userFavList = [];\r\n  let userNewFavList = [];\r\n  let publishTime = '';\r\n  const [btnLoading, setBtnLoading] = useState(false);\r\n  const favouritedBy =\r\n    postData && postData.favouritedBy ? postData.favouritedBy : [];\r\n  const contactNumber =\r\n    postData && postData.contactNumber ? postData.contactNumber : '';\r\n  const authorImage =\r\n    postData.author && postData.author.image && postData.author.image.url\r\n      ? postData.author.image.url\r\n      : null;\r\n  const authorFallbackImage =\r\n    postData.author && postData.author.image && postData.author.image.largeUrl\r\n      ? postData.author.image.largeUrl\r\n      : null;\r\n\r\n  if (favouritedBy.includes(userId)) {\r\n    userFavList.push({ id: postData.id });\r\n  }\r\n  const [userFav, setUserfav] = useState(userFavList);\r\n  const isFavourite = (id, favList) => {\r\n    const favItem = favList.filter(item => item.id === id);\r\n    if (favItem.length) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  const isFav = isFavourite(postData.id, userFav);\r\n\r\n  const handleFavMutation = useMutation(HANDLE_FAV, {\r\n    variables: {\r\n      fav: {\r\n        id: userId,\r\n        postId: postData.id,\r\n      },\r\n    },\r\n  });\r\n  const handleFavourite = async () => {\r\n    setBtnLoading(true);\r\n    if (isLoggedIn) {\r\n      await AuthHelper.refreshToken();\r\n    }\r\n    if (isLoggedIn) {\r\n      try {\r\n        const { data } = await handleFavMutation();\r\n        userNewFavList =\r\n          data &&\r\n          data.handleFav &&\r\n          data.handleFav.data &&\r\n          data.handleFav.data.length\r\n            ? data.handleFav.data\r\n            : [];\r\n        if (userFav.length !== userNewFavList.length) {\r\n          setUserfav(userNewFavList);\r\n        }\r\n        setBtnLoading(false);\r\n      } catch (error) {\r\n        setBtnLoading(false);\r\n      }\r\n    } else {\r\n      setBtnLoading(false);\r\n      // SHOW MODAL\r\n      openModal({\r\n        config: {\r\n          disableDragging: false,\r\n          minHeight: 'auto',\r\n          width: 'auto',\r\n          height: 'auto',\r\n          enableResizing: false,\r\n          disableDragging: true,\r\n          transition: {\r\n            tension: 150,\r\n          },\r\n        },\r\n        springStyle: {\r\n          backgroundColor: '#ffffff',\r\n          overflowY: 'auto',\r\n        },\r\n        modalClass: 'customModal',\r\n        closeOnClickOutside: true,\r\n        component: LoginModal,\r\n        componentProps: {},\r\n      });\r\n    }\r\n  };\r\n  if (postData && postData.createdAt && postData.createdAt.seconds) {\r\n    const timeCalculation = new Date(postData.createdAt.seconds * 1000);\r\n    publishTime = timeFormatAMPM(timeCalculation);\r\n  } else if (postData && postData.createdAt && postData.createdAt._seconds) {\r\n    const timeCalculation = new Date(postData.createdAt._seconds * 1000);\r\n    publishTime = timeFormatAMPM(timeCalculation);\r\n  }\r\n  const adsCategory = (category, index) => {\r\n    return (\r\n      <Link\r\n        key={index}\r\n        href={{\r\n          pathname: `${SINGLE_CATEGORY_PAGE}/${category.slug}`,\r\n          state: {\r\n            termId: category.id,\r\n          },\r\n        }}\r\n      >\r\n        <a>\r\n          <Tag tagContent={category.name} style={{ marginRight: 10 }} />\r\n        </a>\r\n      </Link>\r\n    );\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Text\r\n        content={postData.title}\r\n        as=\"span\"\r\n        fontSize={18}\r\n        fontWeight={600}\r\n        color=\"#333333\"\r\n      />\r\n      <TagGroup marginBottom=\"25px\" style={{ marginTop: 25, width: '100%' }}>\r\n        <LabelTag tagContent={`${CURRENCY} ${postData.price}`} />\r\n        {postData.isNegotiable && (\r\n          <Text\r\n            content=\"Negotiable\"\r\n            as=\"span\"\r\n            fontSize={14}\r\n            fontWeight={400}\r\n            color=\"#595959\"\r\n            mb={0}\r\n          />\r\n        )}\r\n      </TagGroup>\r\n      {postData && postData.distance ? (\r\n        <AddressBox\r\n          distance={\r\n            postData.distance\r\n              ? `Approximately ${Math.floor(postData.distance)} km away`\r\n              : ''\r\n          }\r\n          location={\r\n            postData.formattedLocation\r\n              ? postData.formattedLocation.formattedAddress\r\n              : ''\r\n          }\r\n          style={{ marginBottom: '20px' }}\r\n        />\r\n      ) : (\r\n        <p />\r\n        // <p>Please Enable your location to get distance</p>\r\n      )}\r\n\r\n      <Button\r\n        iconPosition=\"left\"\r\n        title=\"Show Contact\"\r\n        bg=\"#30C56D\"\r\n        style={{ marginBottom: 38, width: '100%' }}\r\n        icon={<Icon name=\"ios-call\" fontSize={19} color=\"#fff\" mr={10} />}\r\n        onClick={() =>\r\n          openModal({\r\n            config: {\r\n              disableDragging: false,\r\n              className: 'contactModal',\r\n              width: 'auto',\r\n              height: 'auto',\r\n              enableResizing: false,\r\n              disableDragging: true,\r\n              transition: {\r\n                tension: 150,\r\n              },\r\n            },\r\n            closeOnClickOutside: true,\r\n            component: ContactInfoModal,\r\n            componentProps: {\r\n              data: {\r\n                contactNumber: contactNumber,\r\n              },\r\n            },\r\n          })\r\n        }\r\n      />\r\n      <InfoBoxWrapper>\r\n        <InfoBox\r\n          imgWidth=\"45px\"\r\n          imgHeight=\"45px\"\r\n          imgRadius={30}\r\n          source={[authorImage, authorFallbackImage]}\r\n          title={\r\n            postData && postData.author && postData.author.name\r\n              ? postData.author.name\r\n              : ''\r\n          }\r\n          author={postData.authorId}\r\n          postedTime={publishTime !== '' ? `Ad posted at ${publishTime}` : ''}\r\n          style={{\r\n            flexGrow: 1,\r\n          }}\r\n        />\r\n\r\n        <ButtonWrapper style={{ flexGrow: 0 }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            icon={<Icon name=\"ios-share-alt\" fontSize={18} color=\"#8C8C8C\" />}\r\n            height={40}\r\n            width={40}\r\n            className=\"outlineButton\"\r\n            style={{\r\n              marginRight: 10,\r\n              borderWidth: '1px',\r\n              borderStyle: 'solid',\r\n              borderColor: '#e2e2e2',\r\n              minHeight: 'auto',\r\n              minWidth: 'auto',\r\n            }}\r\n            onClick={() =>\r\n              openModal({\r\n                config: {\r\n                  disableDragging: false,\r\n                  className: 'shareModal',\r\n                  width: 'auto',\r\n                  height: 'auto',\r\n                  enableResizing: false,\r\n                  disableDragging: true,\r\n                  transition: {\r\n                    tension: 150,\r\n                  },\r\n                },\r\n                withRnd: false,\r\n                closeOnClickOutside: true,\r\n                component: ShareModal,\r\n                componentProps: {\r\n                  data: {\r\n                    author: postData.author.name,\r\n                    link: process.browser ? window.location.href : null,\r\n                    title: postData.title,\r\n                  },\r\n                },\r\n              })\r\n            }\r\n          />\r\n\r\n          <Button\r\n            variant=\"outlined\"\r\n            className=\"outlineButton\"\r\n            isLoading={btnLoading}\r\n            icon={\r\n              <Icon\r\n                name=\"ios-heart\"\r\n                fontSize={18}\r\n                color={isFav ? '#30C56D' : '#8C8C8C'}\r\n              />\r\n            }\r\n            height={40}\r\n            width={40}\r\n            style={{\r\n              borderWidth: '1px',\r\n              borderStyle: 'solid',\r\n              borderColor: isFav ? '#30C56D' : '#e2e2e2',\r\n              minHeight: 'auto',\r\n              minWidth: 'auto',\r\n              padding: 0,\r\n            }}\r\n            onClick={handleFavourite}\r\n          />\r\n        </ButtonWrapper>\r\n      </InfoBoxWrapper>\r\n      <Text\r\n        content=\"Description\"\r\n        fontSize={16}\r\n        fontFamily=\"Poppins\"\r\n        fontWeight={600}\r\n        color=\"#333333\"\r\n        mb={15}\r\n        style={{ display: 'inline-block' }}\r\n      />\r\n      {postData && (\r\n        <Tag\r\n          bgColor={postData.condition ? '#00b6ff' : '#30C56D'}\r\n          tagContent={postData.condition ? 'New' : 'Used'}\r\n          size=\"14px\"\r\n          tagColor=\"#ffffff\"\r\n          style={{\r\n            marginLeft: 15,\r\n            fontWeight: 700,\r\n          }}\r\n        />\r\n      )}\r\n      <AlignCenterWrapper style={{ marginBottom: 15 }}>\r\n        <DescriptionBlock>\r\n          <ReadMore character={150}>{postData.content}</ReadMore>\r\n        </DescriptionBlock>\r\n      </AlignCenterWrapper>\r\n      <AlignCenterWrapper style={{ marginTop: 25, marginBottom: 25 }}>\r\n        {postData.categories && postData.categories.length\r\n          ? postData.categories.map(adsCategory)\r\n          : null}\r\n      </AlignCenterWrapper>\r\n\r\n      {isLoggedIn && postData.authorId && userId === postData.authorId ? (\r\n        <Button\r\n          title=\"Edit\"\r\n          variant=\"textButton\"\r\n          style={{\r\n            minHeight: 'auto',\r\n            minWidth: 'auto',\r\n          }}\r\n          onClick={() => Router.push(`${ADD_POST}/${postData.id}`)}\r\n        />\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n"]},"metadata":{},"sourceType":"module"}