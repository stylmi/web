{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/mrcea/Desktop/Nunua/template/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/pages/categories.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORIES } from 'core/graphql/Category.query';\nimport { SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport { CategoryGridCard } from '../components/CategoryCard';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CategoryLoader from '../components/Loader/CategoryLoader';\nimport PageMeta from '../components/PageMeta';\nimport Heading from 'reusecore/src/elements/Heading';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default _c3 = withApollo(_c2 = withLayout(_c = _s(function () {\n  _s();\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1];\n\n  var QUERY_VARIABLES = {\n    LIMIT: 20\n  };\n\n  var _useQuery = useQuery(GET_CATEGORIES, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  if (error) return /*#__PURE__*/_jsxDEV(OnError, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, _this);\n  var categoryCount = data && data.categories && data.categories.data ? data.categories.data.length : 1;\n  var categories = data && data.categories && data.categories.data ? data.categories.data : [];\n  var totalCategory = data && data.categories ? data.categories.total : 1;\n\n  var renderCategoryItem = function renderCategoryItem(item) {\n    var slug = item.slug,\n        url = item.image.url,\n        name = item.name,\n        posts = item.posts;\n    var postNumber = posts ? posts.total : '';\n    return /*#__PURE__*/_jsxDEV(Link, {\n      href: \"\".concat(SINGLE_CATEGORY_PAGE, \"/[slug]\"),\n      as: \"\".concat(SINGLE_CATEGORY_PAGE, \"/\").concat(slug),\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(CategoryGridCard, {\n          imageSrc: url,\n          title: name,\n          postNumber: \"\".concat(postNumber, \" post\"),\n          height: \"auto\",\n          mb: \"2rem\",\n          boxShadow: \"1px 3px 15px rgba(0, 0, 0, 0.05)\",\n          border: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageMeta, {\n      title: \"Categories\",\n      description: \"Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: 70,\n      pb: 70,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          content: \"Categories\",\n          mb: 40,\n          style: {\n            fontSize: 24,\n            fontWeight: 600,\n            color: '#333333'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, _this), !categories.length && !loading ? /*#__PURE__*/_jsxDEV(NoItemFound, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(ListGrid, {\n          data: categories,\n          totalPost: totalCategory,\n          postCount: categoryCount,\n          columnWidth: [1, 1 / 2, 1 / 4],\n          component: renderCategoryItem,\n          loading: loading ? loading : loadingMore,\n          placeholder: /*#__PURE__*/_jsxDEV(CategoryLoader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 30\n          }, _this),\n          limit: QUERY_VARIABLES.LIMIT,\n          handleLoadMore: function handleLoadMore() {\n            toggleLoading(true);\n            paginate(page + 1);\n            fetchMore({\n              variables: {\n                page: page + 1\n              },\n              updateQuery: function updateQuery(prev, _ref) {\n                var fetchMoreResult = _ref.fetchMoreResult;\n\n                if (!fetchMoreResult) {\n                  toggleLoading(false);\n                  return prev;\n                }\n\n                if (categoryCount && totalCategory) {\n                  if (categoryCount <= totalCategory) {\n                    toggleLoading(false);\n                    return Object.assign({}, prev, {\n                      categories: {\n                        data: [].concat(_toConsumableArray(prev.categories.data), _toConsumableArray(fetchMoreResult.categories.data)),\n                        total: totalCategory\n                      }\n                    });\n                  }\n                }\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n}, \"rGadjvRkkFk17R26hi68/KEVYuw=\", false, function () {\n  return [useQuery];\n})));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"%default%$withApollo$withLayout\");\n$RefreshReg$(_c2, \"%default%$withApollo\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/pages/categories.js"],"names":["useState","Link","Grid","useQuery","GET_CATEGORIES","SINGLE_CATEGORY_PAGE","withLayout","CategoryGridCard","Box","ListGrid","CategoryLoader","PageMeta","Heading","NoItemFound","OnError","withApollo","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","LIMIT","variables","data","loading","error","fetchMore","categoryCount","categories","length","totalCategory","total","renderCategoryItem","item","slug","url","image","name","posts","postNumber","fontSize","fontWeight","color","updateQuery","prev","fetchMoreResult","Object","assign"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORIES } from 'core/graphql/Category.query';\nimport { SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport { CategoryGridCard } from '../components/CategoryCard';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CategoryLoader from '../components/Loader/CategoryLoader';\nimport PageMeta from '../components/PageMeta';\n\nimport Heading from 'reusecore/src/elements/Heading';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(\n  withLayout(() => {\n    const [loadingMore, toggleLoading] = useState(false);\n    const [page, paginate] = useState(1);\n    let QUERY_VARIABLES = {\n      LIMIT: 20,\n    };\n    const { data, loading, error, fetchMore } = useQuery(GET_CATEGORIES, {\n      variables: QUERY_VARIABLES,\n    });\n    if (error) return <OnError />;\n\n    const categoryCount =\n      data && data.categories && data.categories.data\n        ? data.categories.data.length\n        : 1;\n    const categories =\n      data && data.categories && data.categories.data\n        ? data.categories.data\n        : [];\n    const totalCategory = data && data.categories ? data.categories.total : 1;\n    const renderCategoryItem = item => {\n      const {\n        slug,\n        image: { url },\n        name,\n        posts,\n      } = item;\n      const postNumber = posts ? posts.total : '';\n      return (\n        <Link\n          href={`${SINGLE_CATEGORY_PAGE}/[slug]`}\n          as={`${SINGLE_CATEGORY_PAGE}/${slug}`}\n        >\n          <a>\n            <CategoryGridCard\n              imageSrc={url}\n              title={name}\n              postNumber={`${postNumber} post`}\n              height=\"auto\"\n              mb=\"2rem\"\n              boxShadow=\"1px 3px 15px rgba(0, 0, 0, 0.05)\"\n              border=\"none\"\n            />\n          </a>\n        </Link>\n      );\n    };\n\n    return (\n      <>\n        <PageMeta title=\"Categories\" description=\"Categories\" />\n        <Box pt={70} pb={70}>\n          <Grid>\n            <Heading\n              content=\"Categories\"\n              mb={40}\n              style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n            />\n            {!categories.length && !loading ? (\n              <NoItemFound />\n            ) : (\n              <ListGrid\n                data={categories}\n                totalPost={totalCategory}\n                postCount={categoryCount}\n                columnWidth={[1, 1 / 2, 1 / 4]}\n                component={renderCategoryItem}\n                loading={loading ? loading : loadingMore}\n                placeholder={<CategoryLoader />}\n                limit={QUERY_VARIABLES.LIMIT}\n                handleLoadMore={() => {\n                  toggleLoading(true);\n                  paginate(page + 1);\n                  fetchMore({\n                    variables: {\n                      page: page + 1,\n                    },\n                    updateQuery: (prev, { fetchMoreResult }) => {\n                      if (!fetchMoreResult) {\n                        toggleLoading(false);\n                        return prev;\n                      }\n                      if (categoryCount && totalCategory) {\n                        if (categoryCount <= totalCategory) {\n                          toggleLoading(false);\n                          return Object.assign({}, prev, {\n                            categories: {\n                              data: [\n                                ...prev.categories.data,\n                                ...fetchMoreResult.categories.data,\n                              ],\n                              total: totalCategory,\n                            },\n                          });\n                        }\n                      }\n                    },\n                  });\n                }}\n              />\n            )}\n          </Grid>\n        </Box>\n      </>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}