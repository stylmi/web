{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/pages/categories.js\";\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORIES } from 'core/graphql/Category.query';\nimport { SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport { CategoryGridCard } from '../components/CategoryCard';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CategoryLoader from '../components/Loader/CategoryLoader';\nimport PageMeta from '../components/PageMeta';\nimport Heading from 'reusecore/src/elements/Heading';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(withLayout(() => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  let QUERY_VARIABLES = {\n    LIMIT: 20\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_CATEGORIES, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return /*#__PURE__*/_jsxDEV(OnError, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  const categoryCount = data && data.categories && data.categories.data ? data.categories.data.length : 1;\n  const categories = data && data.categories && data.categories.data ? data.categories.data : [];\n  const totalCategory = data && data.categories ? data.categories.total : 1;\n\n  const renderCategoryItem = item => {\n    const {\n      slug,\n      image: {\n        url\n      },\n      name,\n      posts\n    } = item;\n    const postNumber = posts ? posts.total : '';\n    return /*#__PURE__*/_jsxDEV(Link, {\n      href: `${SINGLE_CATEGORY_PAGE}/[slug]`,\n      as: `${SINGLE_CATEGORY_PAGE}/${slug}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(CategoryGridCard, {\n          imageSrc: url,\n          title: name,\n          postNumber: `${postNumber} post`,\n          height: \"auto\",\n          mb: \"2rem\",\n          boxShadow: \"1px 3px 15px rgba(0, 0, 0, 0.05)\",\n          border: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageMeta, {\n      title: \"Categories\",\n      description: \"Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: 70,\n      pb: 70,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          content: \"Categories\",\n          mb: 40,\n          style: {\n            fontSize: 24,\n            fontWeight: 600,\n            color: '#333333'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), !categories.length && !loading ? /*#__PURE__*/_jsxDEV(NoItemFound, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ListGrid, {\n          data: categories,\n          totalPost: totalCategory,\n          postCount: categoryCount,\n          columnWidth: [1, 1 / 2, 1 / 4],\n          component: renderCategoryItem,\n          loading: loading ? loading : loadingMore,\n          placeholder: /*#__PURE__*/_jsxDEV(CategoryLoader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 30\n          }, this),\n          limit: QUERY_VARIABLES.LIMIT,\n          handleLoadMore: () => {\n            toggleLoading(true);\n            paginate(page + 1);\n            fetchMore({\n              variables: {\n                page: page + 1\n              },\n              updateQuery: (prev, {\n                fetchMoreResult\n              }) => {\n                if (!fetchMoreResult) {\n                  toggleLoading(false);\n                  return prev;\n                }\n\n                if (categoryCount && totalCategory) {\n                  if (categoryCount <= totalCategory) {\n                    toggleLoading(false);\n                    return Object.assign({}, prev, {\n                      categories: {\n                        data: [...prev.categories.data, ...fetchMoreResult.categories.data],\n                        total: totalCategory\n                      }\n                    });\n                  }\n                }\n              }\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}));","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/pages/categories.js"],"names":["useState","Link","Grid","useQuery","GET_CATEGORIES","SINGLE_CATEGORY_PAGE","withLayout","CategoryGridCard","Box","ListGrid","CategoryLoader","PageMeta","Heading","NoItemFound","OnError","withApollo","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","LIMIT","data","loading","error","fetchMore","variables","categoryCount","categories","length","totalCategory","total","renderCategoryItem","item","slug","image","url","name","posts","postNumber","fontSize","fontWeight","color","updateQuery","prev","fetchMoreResult","Object","assign"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORIES } from 'core/graphql/Category.query';\nimport { SINGLE_CATEGORY_PAGE } from 'core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport { CategoryGridCard } from '../components/CategoryCard';\nimport Box from 'reusecore/src/elements/Box';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CategoryLoader from '../components/Loader/CategoryLoader';\nimport PageMeta from '../components/PageMeta';\n\nimport Heading from 'reusecore/src/elements/Heading';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(\n  withLayout(() => {\n    const [loadingMore, toggleLoading] = useState(false);\n    const [page, paginate] = useState(1);\n    let QUERY_VARIABLES = {\n      LIMIT: 20,\n    };\n    const { data, loading, error, fetchMore } = useQuery(GET_CATEGORIES, {\n      variables: QUERY_VARIABLES,\n    });\n    if (error) return <OnError />;\n\n    const categoryCount =\n      data && data.categories && data.categories.data\n        ? data.categories.data.length\n        : 1;\n    const categories =\n      data && data.categories && data.categories.data\n        ? data.categories.data\n        : [];\n    const totalCategory = data && data.categories ? data.categories.total : 1;\n    const renderCategoryItem = item => {\n      const {\n        slug,\n        image: { url },\n        name,\n        posts,\n      } = item;\n      const postNumber = posts ? posts.total : '';\n      return (\n        <Link\n          href={`${SINGLE_CATEGORY_PAGE}/[slug]`}\n          as={`${SINGLE_CATEGORY_PAGE}/${slug}`}\n        >\n          <a>\n            <CategoryGridCard\n              imageSrc={url}\n              title={name}\n              postNumber={`${postNumber} post`}\n              height=\"auto\"\n              mb=\"2rem\"\n              boxShadow=\"1px 3px 15px rgba(0, 0, 0, 0.05)\"\n              border=\"none\"\n            />\n          </a>\n        </Link>\n      );\n    };\n\n    return (\n      <>\n        <PageMeta title=\"Categories\" description=\"Categories\" />\n        <Box pt={70} pb={70}>\n          <Grid>\n            <Heading\n              content=\"Categories\"\n              mb={40}\n              style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n            />\n            {!categories.length && !loading ? (\n              <NoItemFound />\n            ) : (\n              <ListGrid\n                data={categories}\n                totalPost={totalCategory}\n                postCount={categoryCount}\n                columnWidth={[1, 1 / 2, 1 / 4]}\n                component={renderCategoryItem}\n                loading={loading ? loading : loadingMore}\n                placeholder={<CategoryLoader />}\n                limit={QUERY_VARIABLES.LIMIT}\n                handleLoadMore={() => {\n                  toggleLoading(true);\n                  paginate(page + 1);\n                  fetchMore({\n                    variables: {\n                      page: page + 1,\n                    },\n                    updateQuery: (prev, { fetchMoreResult }) => {\n                      if (!fetchMoreResult) {\n                        toggleLoading(false);\n                        return prev;\n                      }\n                      if (categoryCount && totalCategory) {\n                        if (categoryCount <= totalCategory) {\n                          toggleLoading(false);\n                          return Object.assign({}, prev, {\n                            categories: {\n                              data: [\n                                ...prev.categories.data,\n                                ...fetchMoreResult.categories.data,\n                              ],\n                              total: totalCategory,\n                            },\n                          });\n                        }\n                      }\n                    },\n                  });\n                }}\n              />\n            )}\n          </Grid>\n        </Box>\n      </>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}