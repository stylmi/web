{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/mrcea/Desktop/Nunua/template/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/components/InputGooglePlace/altered.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nvar LocationSearchInput = function LocationSearchInput(props) {\n  var handleSelect = function handleSelect(selected) {\n    var address = selected;\n    var locationAddress;\n    props.handleAddress(address);\n    geocodeByAddress(selected).then(function (values) {\n      return console.log(values);\n    }).then(function (results) {\n      locationAddress = [results[0]];\n      return getLatLng(results[0]);\n    }).then(function (latLng) {\n      return props.handleLocation(latLng, address);\n    })[\"catch\"](function (error) {\n      return console.error('Error', error);\n    });\n  };\n\n  var handleCloseClick = function handleCloseClick() {\n    setAddressState(_objectSpread(_objectSpread({}, addressState), {}, {\n      address: ''\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n    value: props.address,\n    onChange: props.handleChange,\n    onSelect: handleSelect,\n    children: function children(_ref) {\n      var getInputProps = _ref.getInputProps,\n          suggestions = _ref.suggestions,\n          getSuggestionItemProps = _ref.getSuggestionItemProps,\n          loading = _ref.loading;\n      return /*#__PURE__*/_jsxDEV(LocationWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, getInputProps()), {}, {\n            required: \"required\",\n            label: \"Location\"\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, _this), props.address && /*#__PURE__*/_jsxDEV(SearchResultWrapper, {\n          className: \"autocomplete-dropdown-container\",\n          children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 27\n          }, _this), suggestions.map(function (suggestion) {\n            var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n            var style = suggestion.active ? {\n              backgroundColor: '#e2e2e2'\n            } : {\n              backgroundColor: '#ffffff'\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getSuggestionItemProps(suggestion, {\n              className: className,\n              style: style\n            })), {}, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, _this)\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = LocationSearchInput;\nexport default LocationSearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocationSearchInput\");","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/components/InputGooglePlace/altered.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Input","LocationWrapper","SearchResultWrapper","LocationSearchInput","props","handleSelect","selected","address","locationAddress","handleAddress","then","values","console","log","results","latLng","handleLocation","error","handleCloseClick","setAddressState","addressState","handleChange","getInputProps","suggestions","getSuggestionItemProps","loading","map","suggestion","className","active","style","backgroundColor","description"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nconst LocationSearchInput = props => {\n  const handleSelect = selected => {\n    const address = selected;\n    let locationAddress;\n    props.handleAddress(address);\n    geocodeByAddress(selected)\n     .then(values => console.log(values))\n      .then(results => {\n        locationAddress = [results[0]]\n        return getLatLng(results[0])\n      })\n      .then(latLng => props.handleLocation(latLng, address))\n      .catch(error => console.error('Error', error));\n  };\n\n  const handleCloseClick = () => {\n    setAddressState({ ...addressState, address: '' });\n  };\n\n  return (\n    <PlacesAutocomplete\n      value={props.address}\n      onChange={props.handleChange}\n      onSelect={handleSelect}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <LocationWrapper>\n          <div>\n            <Input {...getInputProps()} required=\"required\" label=\"Location\" />\n            {/* {addressState.address.length > 0 && (\n                <button onClick={handleCloseClick}>x</button>\n              )} */}\n          </div>\n          {props.address && (\n            <SearchResultWrapper className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? {\n                      backgroundColor: '#e2e2e2',\n                    }\n                  : {\n                      backgroundColor: '#ffffff',\n                    };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </SearchResultWrapper>\n          )}\n        </LocationWrapper>\n      )}\n    </PlacesAutocomplete>\n  );\n};\n\nexport default LocationSearchInput;\n"]},"metadata":{},"sourceType":"module"}