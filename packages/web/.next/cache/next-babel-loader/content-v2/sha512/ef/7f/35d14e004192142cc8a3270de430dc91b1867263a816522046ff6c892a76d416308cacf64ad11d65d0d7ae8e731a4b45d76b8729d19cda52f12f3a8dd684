{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/pages/category/[slug].js\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORY_POST } from 'core/graphql/CategoryPost.query';\nimport { CURRENCY } from '../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../../hoc/withLayout';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../../components/Loader/CardLoader';\nimport PostCard from '../../components/PostCard';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nimport PageMeta from '../../components/PageMeta';\nimport { withApollo } from '../../helpers/apollo';\n\nvar SingleCategory = function SingleCategory(_ref) {\n  _s();\n\n  var data = _ref.data,\n      loading = _ref.loading,\n      fetchMore = _ref.fetchMore,\n      limit = _ref.limit;\n\n  var _useState = useState(false),\n      loadingMore = _useState[0],\n      toggleLoading = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      paginate = _useState2[1];\n\n  var fetchedCategoryPost = data && data.category ? data.category.posts.data : [];\n  var postCount = fetchedCategoryPost.length;\n  var totalPost = data && data.category ? data.category.posts.total : null;\n  var categoryName = data && data.category ? data.category.name : null;\n\n  var renderCategoryPost = function renderCategoryPost(item) {\n    var title = item.title,\n        _item$price = item.price,\n        price = _item$price === void 0 ? \"0.00\" : _item$price,\n        slug = item.slug,\n        _item$image = item.image,\n        url = _item$image.url,\n        largeUrl = _item$image.largeUrl;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      href: \"\".concat(SINGLE_POST_PAGE, \"/[slug]\"),\n      as: \"\".concat(SINGLE_POST_PAGE, \"/\").concat(slug),\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: /*#__PURE__*/_jsxDEV(PostCard, {\n          currency: CURRENCY,\n          title: title,\n          price: price,\n          imageSrc: [url, largeUrl]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 50,\n    mb: 50,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        content: categoryName,\n        mb: 40,\n        style: {\n          fontSize: 24,\n          fontWeight: 600,\n          color: '#333333'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, _this), !fetchedCategoryPost ? /*#__PURE__*/_jsxDEV(NoItemFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(ListGrid, {\n        data: fetchedCategoryPost,\n        totalPost: totalPost,\n        postCount: postCount,\n        columnWidth: [1, 1 / 2, 1 / 4],\n        component: renderCategoryPost,\n        loading: loading ? loading : loadingMore,\n        isLoading: loadingMore,\n        placeholder: /*#__PURE__*/_jsxDEV(CardLoader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, _this),\n        limit: limit,\n        handleLoadMore: function handleLoadMore(loading) {\n          toggleLoading(true);\n          paginate(page + 1);\n          fetchMore({\n            variables: {\n              page: page + 1\n            },\n            updateQuery: function updateQuery(prev, _ref2) {\n              var fetchMoreResult = _ref2.fetchMoreResult;\n\n              if (!fetchMoreResult) {\n                toggleLoading(false);\n                return prev;\n              }\n\n              var oldPosts = prev.category.posts.data;\n              var newPosts = fetchMoreResult.category.posts.data;\n\n              if (postCount && totalPost) {\n                if (postCount <= totalPost) {\n                  toggleLoading(false);\n                  var concatedPosts = oldPosts.concat(newPosts);\n                  fetchMoreResult.category.posts.data = concatedPosts;\n                  return fetchMoreResult;\n                }\n              }\n            }\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(SingleCategory, \"25iQoVrm29SSq5WFwHO/HvTjfug=\");\n\n_c = SingleCategory;\nexport default _c4 = withApollo(_c3 = withLayout(_c2 = _s2(function () {\n  _s2();\n\n  var _useRouter = useRouter(),\n      slug = _useRouter.query.slug;\n\n  var QUERY_VARIABLES = {\n    SLUG: slug,\n    LIMIT: 20\n  };\n\n  var _useQuery = useQuery(GET_CATEGORY_POST, {\n    variables: QUERY_VARIABLES\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      fetchMore = _useQuery.fetchMore;\n\n  if (error) return /*#__PURE__*/_jsxDEV(OnError, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 23\n  }, _this);\n\n  var _ref3 = data && data.category ? data.category : '',\n      name = _ref3.name;\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageMeta, {\n      title: name,\n      description: \"Product categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(SingleCategory, {\n      data: data,\n      loading: loading,\n      fetchMore: fetchMore,\n      limit: QUERY_VARIABLES.LIMIT\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 7\n  }, _this);\n}, \"3I+TPnhAJoWLhJCHHl7Ma3TTnSI=\", false, function () {\n  return [useRouter, useQuery];\n})));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SingleCategory\");\n$RefreshReg$(_c2, \"%default%$withApollo$withLayout\");\n$RefreshReg$(_c3, \"%default%$withApollo\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/pages/category/[slug].js"],"names":["Fragment","useState","useRouter","Link","Grid","useQuery","GET_CATEGORY_POST","CURRENCY","SINGLE_POST_PAGE","withLayout","Box","Heading","ListGrid","CardLoader","PostCard","NoItemFound","OnError","PageMeta","withApollo","SingleCategory","data","loading","fetchMore","limit","loadingMore","toggleLoading","page","paginate","fetchedCategoryPost","category","posts","postCount","length","totalPost","total","categoryName","name","renderCategoryPost","item","title","price","slug","image","url","largeUrl","fontSize","fontWeight","color","variables","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","concatedPosts","concat","query","QUERY_VARIABLES","SLUG","LIMIT","error"],"mappings":"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","sourcesContent":["import { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORY_POST } from 'core/graphql/CategoryPost.query';\nimport { CURRENCY } from '../../Config';\nimport { SINGLE_POST_PAGE } from 'core/navigation/constant';\nimport withLayout from '../../hoc/withLayout';\nimport Box from 'reusecore/src/elements/Box';\nimport Heading from 'reusecore/src/elements/Heading';\nimport ListGrid from 'reusecore/src/elements/ListGrid';\nimport CardLoader from '../../components/Loader/CardLoader';\nimport PostCard from '../../components/PostCard';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nimport PageMeta from '../../components/PageMeta';\nimport { withApollo } from '../../helpers/apollo';\nconst SingleCategory = ({ data, loading, fetchMore, limit }) => {\n  const [loadingMore, toggleLoading] = useState(false);\n  const [page, paginate] = useState(1);\n  const fetchedCategoryPost =\n    data && data.category ? data.category.posts.data : [];\n  const postCount = fetchedCategoryPost.length;\n  const totalPost = data && data.category ? data.category.posts.total : null;\n  const categoryName = data && data.category ? data.category.name : null;\n\n  const renderCategoryPost = item => {\n    const {\n      title,\n      price = `0.00`,\n      slug,\n      image: { url, largeUrl },\n    } = item;\n    return (\n      <Link\n        href={`${SINGLE_POST_PAGE}/[slug]`}\n        as={`${SINGLE_POST_PAGE}/${slug}`}\n      >\n        <a>\n          <PostCard\n            currency={CURRENCY}\n            title={title}\n            price={price}\n            imageSrc={[url, largeUrl]}\n          />\n        </a>\n      </Link>\n    );\n  };\n  return (\n    <Box mt={50} mb={50}>\n      <Grid>\n        <Heading\n          content={categoryName}\n          mb={40}\n          style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n        />\n        {!fetchedCategoryPost ? (\n          <NoItemFound />\n        ) : (\n          <ListGrid\n            data={fetchedCategoryPost}\n            totalPost={totalPost}\n            postCount={postCount}\n            columnWidth={[1, 1 / 2, 1 / 4]}\n            component={renderCategoryPost}\n            loading={loading ? loading : loadingMore}\n            isLoading={loadingMore}\n            placeholder={<CardLoader />}\n            limit={limit}\n            handleLoadMore={loading => {\n              toggleLoading(true);\n              paginate(page + 1);\n              fetchMore({\n                variables: {\n                  page: page + 1,\n                },\n                updateQuery: (prev, { fetchMoreResult }) => {\n                  if (!fetchMoreResult) {\n                    toggleLoading(false);\n                    return prev;\n                  }\n                  const oldPosts = prev.category.posts.data;\n                  const newPosts = fetchMoreResult.category.posts.data;\n                  if (postCount && totalPost) {\n                    if (postCount <= totalPost) {\n                      toggleLoading(false);\n                      const concatedPosts = oldPosts.concat(newPosts);\n                      fetchMoreResult.category.posts.data = concatedPosts;\n                      return fetchMoreResult;\n                    }\n                  }\n                },\n              });\n            }}\n          />\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default withApollo(\n  withLayout(() => {\n    const {\n      query: { slug },\n    } = useRouter();\n    let QUERY_VARIABLES = {\n      SLUG: slug,\n      LIMIT: 20,\n    };\n    const { data, loading, error, fetchMore } = useQuery(GET_CATEGORY_POST, {\n      variables: QUERY_VARIABLES,\n    });\n\n    if (error) return <OnError />;\n\n    const { name } = data && data.category ? data.category : '';\n    return (\n      <Fragment>\n        <PageMeta title={name} description=\"Product categories\" />\n        <SingleCategory\n          data={data}\n          loading={loading}\n          fetchMore={fetchMore}\n          limit={QUERY_VARIABLES.LIMIT}\n        />\n      </Fragment>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}