{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/containers/AddPost/PickImages/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { useMutation } from '@apollo/react-hooks';\nimport AuthHelper from '../../../helpers/authHelper';\nimport { ADD_POST } from '../../../../core/graphql/Mutations';\nimport Text from '../../../../reusecore/src/elements/Text';\nimport Heading from '../../../../reusecore/src/elements/Heading';\nimport Box from '../../../../reusecore/src/elements/Box';\nimport Alert from '../../../../reusecore/src/elements/Alert';\nimport DropArea from '../../../components/DropArea';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport LoadingIndicator from '../../../components/LoadingIndicator';\nlet imagesUrl = [];\n\nconst PickImages = ({\n  userId\n}) => {\n  const {\n    0: uploadLoader,\n    1: ToggleLoader\n  } = useState(false);\n  const {\n    0: uploadRejected,\n    1: setUploadRejected\n  } = useState(false);\n  const {\n    state,\n    dispatch\n  } = useContext(AddPostContext);\n  const {\n    step,\n    adPost\n  } = state;\n  const authorId = userId;\n  const [postMutation, {\n    data\n  }] = useMutation(ADD_POST);\n\n  const onPreviewDrop = async selectedImages => {\n    setUploadRejected(false);\n\n    if (selectedImages.length) {\n      ToggleLoader(true);\n      await AuthHelper.refreshToken();\n      imagesUrl = await uploadMultipleImages(selectedImages);\n\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            authorId: authorId,\n            slug: new Date()\n          }\n        });\n      }\n\n      dispatch({\n        type: 'UPDATE_STEP',\n        payload: {\n          step: step + 1\n        }\n      });\n    }\n  };\n\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery\n  } = adPost,\n        prossedAdPostData = _objectWithoutProperties(adPost, [\"preImage\", \"preGallery\", \"localImage\", \"localGallery\"]);\n\n  useEffect(() => {\n    (async function () {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: prossedAdPostData\n            }\n          });\n          ToggleLoader(false);\n\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: {\n                key: 'id',\n                value: data.data.addPost.id\n              }\n            });\n          }\n        } catch (error) {\n          ToggleLoader(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n\n  const onDropRejected = () => {\n    ToggleLoader(false);\n    setUploadRejected(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    flexBox: true,\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      minHeight: 'inherit'\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      width: \"305px\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h1\",\n        content: \"Post Ads\",\n        textAlign: \"center\",\n        mb: 40,\n        style: {\n          fontSize: 24,\n          fontWeight: 600,\n          color: '#333333'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), uploadLoader && /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 26\n      }, this), uploadRejected && /*#__PURE__*/_jsxDEV(Alert, {\n        colors: \"error\",\n        mb: 30,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: \"Maximum upload size 1MB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dropzone, {\n        onDrop: onPreviewDrop,\n        maxSize: 1024000,\n        onDropRejected: onDropRejected,\n        children: ({\n          getRootProps,\n          getInputProps\n        }) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getRootProps()), {}, {\n            style: {\n              outline: 0\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps()), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DropArea, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        content: \"World\\u2019s largest free buy and selling advertising platform .\",\n        textAlign: \"center\",\n        lineHeight: \"22px\",\n        style: {\n          fontSize: 16,\n          fontWeight: 400,\n          color: '#595959'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\nexport default PickImages;","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/containers/AddPost/PickImages/index.js"],"names":["React","useContext","useEffect","useState","Dropzone","useMutation","AuthHelper","ADD_POST","Text","Heading","Box","Alert","DropArea","AddPostContext","uploadMultipleImages","LoadingIndicator","imagesUrl","PickImages","userId","uploadLoader","ToggleLoader","uploadRejected","setUploadRejected","state","dispatch","step","adPost","authorId","postMutation","data","onPreviewDrop","selectedImages","length","refreshToken","type","payload","gallery","concat","image","url","slug","Date","preImage","preGallery","localImage","localGallery","prossedAdPostData","variables","post","id","key","value","addPost","error","onDropRejected","minHeight","fontSize","fontWeight","color","textAlign","getRootProps","getInputProps","outline"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport AuthHelper from '../../../helpers/authHelper';\nimport { ADD_POST } from '../../../../core/graphql/Mutations';\nimport Text from '../../../../reusecore/src/elements/Text';\nimport Heading from '../../../../reusecore/src/elements/Heading';\nimport Box from '../../../../reusecore/src/elements/Box';\nimport Alert from '../../../../reusecore/src/elements/Alert';\nimport DropArea from '../../../components/DropArea';\nimport { AddPostContext } from '../../../contexts/AddPostContext';\nimport { uploadMultipleImages } from '../../../helpers/uploadMultipleImage';\nimport LoadingIndicator from '../../../components/LoadingIndicator';\n\nlet imagesUrl = [];\nconst PickImages = ({ userId }) => {\n  const [uploadLoader, ToggleLoader] = useState(false);\n  const [uploadRejected, setUploadRejected] = useState(false);\n  const { state, dispatch } = useContext(AddPostContext);\n  const { step, adPost } = state;\n  const authorId = userId;\n  const [postMutation, { data }] = useMutation(ADD_POST);\n\n  const onPreviewDrop = async selectedImages => {\n    setUploadRejected(false);\n    if (selectedImages.length) {\n      ToggleLoader(true);\n      await AuthHelper.refreshToken();\n      imagesUrl = await uploadMultipleImages(selectedImages);\n      if (imagesUrl && imagesUrl.length > 0) {\n        dispatch({\n          type: 'UPDATE_FULL_ADPOST',\n          payload: {\n            gallery: adPost.gallery.concat(imagesUrl[0]),\n            image: !adPost.image.url ? imagesUrl[0][0] : adPost.image,\n            authorId: authorId,\n            slug: new Date(),\n          },\n        });\n      }\n\n      dispatch({ type: 'UPDATE_STEP', payload: { step: step + 1 } });\n    }\n  };\n  const {\n    preImage,\n    preGallery,\n    localImage,\n    localGallery,\n    ...prossedAdPostData\n  } = adPost;\n  useEffect(() => {\n    (async function() {\n      if (imagesUrl.length) {\n        try {\n          const data = await postMutation({\n            variables: {\n              post: prossedAdPostData,\n            },\n          });\n          ToggleLoader(false);\n          if (!adPost.id) {\n            dispatch({\n              type: 'UPDATE_ADPOST',\n              payload: { key: 'id', value: data.data.addPost.id },\n            });\n          }\n        } catch (error) {\n          ToggleLoader(false);\n        }\n      }\n    })();\n  }, [prossedAdPostData.gallery]);\n  const onDropRejected = () => {\n    ToggleLoader(false);\n    setUploadRejected(true);\n  };\n  return (\n    <Box\n      flexBox\n      height=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      style={{\n        minHeight: 'inherit',\n      }}\n    >\n      <Box width=\"305px\">\n        <Heading\n          as=\"h1\"\n          content=\"Post Ads\"\n          textAlign=\"center\"\n          mb={40}\n          style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\n        />\n        {uploadLoader && <LoadingIndicator />}\n        {uploadRejected && (\n          <Alert colors=\"error\" mb={30}>\n            <div style={{ textAlign: 'center' }}>Maximum upload size 1MB</div>\n          </Alert>\n        )}\n        <Dropzone\n          onDrop={onPreviewDrop}\n          maxSize={1024000}\n          onDropRejected={onDropRejected}\n        >\n          {({ getRootProps, getInputProps }) => {\n            return (\n              <div {...getRootProps()} style={{ outline: 0 }}>\n                <input {...getInputProps()} />\n                <DropArea />\n              </div>\n            );\n          }}\n        </Dropzone>\n\n        <Text\n          content=\"World’s largest free buy and selling advertising platform .\"\n          textAlign=\"center\"\n          lineHeight=\"22px\"\n          style={{ fontSize: 16, fontWeight: 400, color: '#595959' }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nexport default PickImages;\n"]},"metadata":{},"sourceType":"module"}