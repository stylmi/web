{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/components/TextButton/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledButton, ButtonIcon, ButtonText } from './style';\n\nconst TextButton = (_ref) => {\n  let {\n    title,\n    onClick,\n    style,\n    icon,\n    iconStyle,\n    iconPosition,\n    className,\n    disabled\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"title\", \"onClick\", \"style\", \"icon\", \"iconStyle\", \"iconPosition\", \"className\", \"disabled\"]);\n\n  return /*#__PURE__*/_jsxDEV(StyledButton, _objectSpread(_objectSpread({\n    style: style,\n    onClick: onClick,\n    className: className,\n    disabled: disabled\n  }, props), {}, {\n    children: [icon && iconPosition === 'left' && /*#__PURE__*/_jsxDEV(ButtonIcon, {\n      disabled: disabled,\n      style: iconStyle,\n      iconPosition: iconPosition,\n      children: icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ButtonText, {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), icon && iconPosition === 'right' && /*#__PURE__*/_jsxDEV(ButtonIcon, {\n      disabled: disabled,\n      style: iconStyle,\n      iconPosition: iconPosition,\n      children: icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nTextButton.propTypes = {\n  /** Title of button. */\n  title: PropTypes.string,\n\n  /** Text sizes of button. */\n  textSize: PropTypes.number,\n\n  /** Text Weight of button. */\n  fontWeight: PropTypes.number,\n\n  /** Callback function when button is pressed. */\n  onPress: PropTypes.func,\n\n  /** Callback function when button is press in. */\n  onPressIn: PropTypes.func,\n\n  /** Callback function when button is press out. */\n  onPressOut: PropTypes.func,\n\n  /** Callback function when button is long press. */\n  onLongPress: PropTypes.func,\n\n  /** Determines what the opacity of the wrapped view should be when touch is active. */\n  activeOpacity: PropTypes.number,\n\n  /** Custom style for the button */\n  style: PropTypes.any,\n\n  /** Text Style for the button */\n  textStyle: PropTypes.any,\n\n  /** Custom text color for the button */\n  textColor: PropTypes.string,\n\n  /** Class name of the button */\n  className: PropTypes.string,\n\n  /** Icon name for the button */\n  icon: PropTypes.object,\n\n  /** Icon Position */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** custom style for the icon */\n  iconStyle: PropTypes.any,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n};\nTextButton.defaultProps = {\n  iconPosition: 'right',\n  activeOpacity: 0.9,\n  disabled: false\n};\nexport default TextButton;","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/components/TextButton/index.js"],"names":["React","PropTypes","StyledButton","ButtonIcon","ButtonText","TextButton","title","onClick","style","icon","iconStyle","iconPosition","className","disabled","props","propTypes","string","textSize","number","fontWeight","onPress","func","onPressIn","onPressOut","onLongPress","activeOpacity","any","textStyle","textColor","object","oneOf","oneOfType","bool","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC,QAAqD,SAArD;;AAEA,MAAMC,UAAU,GAAG,UAUb;AAAA,MAVc;AAClBC,IAAAA,KADkB;AAElBC,IAAAA,OAFkB;AAGlBC,IAAAA,KAHkB;AAIlBC,IAAAA,IAJkB;AAKlBC,IAAAA,SALkB;AAMlBC,IAAAA,YANkB;AAOlBC,IAAAA,SAPkB;AAQlBC,IAAAA;AARkB,GAUd;AAAA,MADDC,KACC;;AACJ,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEN,KADT;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,SAAS,EAAEK,SAHb;AAIE,IAAA,QAAQ,EAAEC;AAJZ,KAKMC,KALN;AAAA,eAOGL,IAAI,IAAIE,YAAY,KAAK,MAAzB,iBACC,QAAC,UAAD;AACE,MAAA,QAAQ,EAAEE,QADZ;AAEE,MAAA,KAAK,EAAEH,SAFT;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAAA,gBAKGF;AALH;AAAA;AAAA;AAAA;AAAA,YARJ,eAgBE,QAAC,UAAD;AAAA,gBAAaH;AAAb;AAAA;AAAA;AAAA;AAAA,YAhBF,EAiBGG,IAAI,IAAIE,YAAY,KAAK,OAAzB,iBACC,QAAC,UAAD;AACE,MAAA,QAAQ,EAAEE,QADZ;AAEE,MAAA,KAAK,EAAEH,SAFT;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAAA,gBAKGF;AALH;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAxCD;;AA0CAJ,UAAU,CAACU,SAAX,GAAuB;AACrB;AACAT,EAAAA,KAAK,EAAEL,SAAS,CAACe,MAFI;;AAIrB;AACAC,EAAAA,QAAQ,EAAEhB,SAAS,CAACiB,MALC;;AAOrB;AACAC,EAAAA,UAAU,EAAElB,SAAS,CAACiB,MARD;;AAUrB;AACAE,EAAAA,OAAO,EAAEnB,SAAS,CAACoB,IAXE;;AAarB;AACAC,EAAAA,SAAS,EAAErB,SAAS,CAACoB,IAdA;;AAgBrB;AACAE,EAAAA,UAAU,EAAEtB,SAAS,CAACoB,IAjBD;;AAmBrB;AACAG,EAAAA,WAAW,EAAEvB,SAAS,CAACoB,IApBF;;AAsBrB;AACAI,EAAAA,aAAa,EAAExB,SAAS,CAACiB,MAvBJ;;AAyBrB;AACAV,EAAAA,KAAK,EAAEP,SAAS,CAACyB,GA1BI;;AA4BrB;AACAC,EAAAA,SAAS,EAAE1B,SAAS,CAACyB,GA7BA;;AA+BrB;AACAE,EAAAA,SAAS,EAAE3B,SAAS,CAACe,MAhCA;;AAkCrB;AACAJ,EAAAA,SAAS,EAAEX,SAAS,CAACe,MAnCA;;AAqCrB;AACAP,EAAAA,IAAI,EAAER,SAAS,CAAC4B,MAtCK;;AAwCrB;AACAlB,EAAAA,YAAY,EAAEV,SAAS,CAAC6B,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAzCO;;AA2CrB;AACApB,EAAAA,SAAS,EAAET,SAAS,CAACyB,GA5CA;;AA8CrB;AACAb,EAAAA,QAAQ,EAAEZ,SAAS,CAAC8B,SAAV,CAAoB,CAAC9B,SAAS,CAACe,MAAX,EAAmBf,SAAS,CAAC+B,IAA7B,CAApB;AA/CW,CAAvB;AAkDA3B,UAAU,CAAC4B,YAAX,GAA0B;AACxBtB,EAAAA,YAAY,EAAE,OADU;AAExBc,EAAAA,aAAa,EAAE,GAFS;AAGxBZ,EAAAA,QAAQ,EAAE;AAHc,CAA1B;AAMA,eAAeR,UAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledButton, ButtonIcon, ButtonText } from './style';\n\nconst TextButton = ({\n  title,\n  onClick,\n  style,\n  icon,\n  iconStyle,\n  iconPosition,\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <StyledButton\n      style={style}\n      onClick={onClick}\n      className={className}\n      disabled={disabled}\n      {...props}\n    >\n      {icon && iconPosition === 'left' && (\n        <ButtonIcon\n          disabled={disabled}\n          style={iconStyle}\n          iconPosition={iconPosition}\n        >\n          {icon}\n        </ButtonIcon>\n      )}\n      <ButtonText>{title}</ButtonText>\n      {icon && iconPosition === 'right' && (\n        <ButtonIcon\n          disabled={disabled}\n          style={iconStyle}\n          iconPosition={iconPosition}\n        >\n          {icon}\n        </ButtonIcon>\n      )}\n    </StyledButton>\n  );\n};\n\nTextButton.propTypes = {\n  /** Title of button. */\n  title: PropTypes.string,\n\n  /** Text sizes of button. */\n  textSize: PropTypes.number,\n\n  /** Text Weight of button. */\n  fontWeight: PropTypes.number,\n\n  /** Callback function when button is pressed. */\n  onPress: PropTypes.func,\n\n  /** Callback function when button is press in. */\n  onPressIn: PropTypes.func,\n\n  /** Callback function when button is press out. */\n  onPressOut: PropTypes.func,\n\n  /** Callback function when button is long press. */\n  onLongPress: PropTypes.func,\n\n  /** Determines what the opacity of the wrapped view should be when touch is active. */\n  activeOpacity: PropTypes.number,\n\n  /** Custom style for the button */\n  style: PropTypes.any,\n\n  /** Text Style for the button */\n  textStyle: PropTypes.any,\n\n  /** Custom text color for the button */\n  textColor: PropTypes.string,\n\n  /** Class name of the button */\n  className: PropTypes.string,\n\n  /** Icon name for the button */\n  icon: PropTypes.object,\n\n  /** Icon Position */\n  iconPosition: PropTypes.oneOf(['left', 'right']),\n\n  /** custom style for the icon */\n  iconStyle: PropTypes.any,\n\n  /** If true button will be disabled */\n  disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n};\n\nTextButton.defaultProps = {\n  iconPosition: 'right',\n  activeOpacity: 0.9,\n  disabled: false,\n};\n\nexport default TextButton;\n"]},"metadata":{},"sourceType":"module"}