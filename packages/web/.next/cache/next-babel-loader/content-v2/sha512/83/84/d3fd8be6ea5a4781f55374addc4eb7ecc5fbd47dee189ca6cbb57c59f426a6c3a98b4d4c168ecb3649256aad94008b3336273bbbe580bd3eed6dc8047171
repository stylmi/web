{"ast":null,"code":"import _defineProperty from \"C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\reusecore\\\\src\\\\elements\\\\Switch\\\\index.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useToggle } from '../../hooks';\nimport SwitchStyle from './switch.style';\n\nvar Switch = function Switch(_ref) {\n  var className = _ref.className,\n      switchColor = _ref.switchColor,\n      isChecked = _ref.isChecked,\n      labelText = _ref.labelText,\n      labelPosition = _ref.labelPosition,\n      switchSize = _ref.switchSize,\n      isMaterial = _ref.isMaterial,\n      barColor = _ref.barColor,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      handleOnChange = _ref.handleOnChange,\n      props = _objectWithoutProperties(_ref, [\"className\", \"switchColor\", \"isChecked\", \"labelText\", \"labelPosition\", \"switchSize\", \"isMaterial\", \"barColor\", \"onChange\", \"onFocus\", \"onBlur\", \"handleOnChange\"]);\n\n  // Add all classs to an array\n  var addAllClasses = ['reusecore__switch']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(\"label_\".concat(labelPosition));\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  handleOnChange = function handleOnChange(event) {\n    onChange(!isChecked);\n  };\n\n  var LabelField = labelText && /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"reusecore__field-label\",\n    children: labelText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, _this);\n\n  var position = labelPosition || 'top';\n  return /*#__PURE__*/_jsxDEV(SwitchStyle, _objectSpread(_objectSpread({\n    className: addAllClasses.join(' '),\n    switchColor: switchColor,\n    switchSize: switchSize,\n    barColor: barColor\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [position === 'left' || position === 'right' || position === 'top' ? LabelField : '', /*#__PURE__*/_jsxDEV(\"input\", {\n        checked: isChecked,\n        onChange: handleOnChange,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        className: \"switch\",\n        type: \"checkbox\",\n        value: isChecked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, _this), position === 'bottom' && LabelField]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Switch;\nSwitch.propTypes = {\n  /** ClassName of the Switch */\n  className: PropTypes.string,\n\n  /** Add Material effect */\n  isMaterial: PropTypes.bool,\n\n  /** labelText of the switch field */\n  labelText: PropTypes.string,\n\n  /** switchSize control switch width and height */\n  switchSize: PropTypes.string,\n\n  /** Set label position of the switch field */\n  labelPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n\n  /** Switch toggle state based on isChecked prop */\n  isChecked: PropTypes.bool,\n\n  /** Set color for Switch */\n  SwitchColor: PropTypes.string,\n\n  /** Set material bar color for Switch */\n  barColor: PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\n  onChange: PropTypes.func\n};\nSwitch.defaultProps = {\n  isChecked: false,\n  labelPosition: 'top',\n  onBlur: function onBlur() {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {}\n};\nexport default Switch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Switch\");","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/reusecore/src/elements/Switch/index.js"],"names":["React","useState","PropTypes","useToggle","SwitchStyle","Switch","className","switchColor","isChecked","labelText","labelPosition","switchSize","isMaterial","barColor","onChange","onFocus","onBlur","handleOnChange","props","addAllClasses","push","event","LabelField","position","join","propTypes","string","bool","oneOf","SwitchColor","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useToggle } from '../../hooks';\r\nimport SwitchStyle from './switch.style';\r\n\r\nconst Switch = ({\r\n  className,\r\n  switchColor,\r\n  isChecked,\r\n  labelText,\r\n  labelPosition,\r\n  switchSize,\r\n  isMaterial,\r\n  barColor,\r\n  onChange,\r\n  onFocus,\r\n  onBlur,\r\n  handleOnChange,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__switch'];\r\n\r\n  // Add label position class\r\n  if (labelPosition) {\r\n    addAllClasses.push(`label_${labelPosition}`);\r\n  }\r\n\r\n  // isMaterial prop checking\r\n  if (isMaterial) {\r\n    addAllClasses.push('is-material');\r\n  }\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  handleOnChange = event => {\r\n    onChange(!isChecked);\r\n  };\r\n\r\n  const LabelField = labelText && (\r\n    <span className=\"reusecore__field-label\">{labelText}</span>\r\n  );\r\n\r\n  const position = labelPosition || 'top';\r\n\r\n  return (\r\n    <SwitchStyle\r\n      className={addAllClasses.join(' ')}\r\n      switchColor={switchColor}\r\n      switchSize={switchSize}\r\n      barColor={barColor}\r\n      {...props}\r\n    >\r\n      <label>\r\n        {position === 'left' || position === 'right' || position === 'top'\r\n          ? LabelField\r\n          : ''}\r\n\r\n        <input\r\n          checked={isChecked}\r\n          onChange={handleOnChange}\r\n          onBlur={onBlur}\r\n          onFocus={onFocus}\r\n          className=\"switch\"\r\n          type=\"checkbox\"\r\n          value={isChecked}\r\n        />\r\n        <div>\r\n          <div />\r\n        </div>\r\n        {position === 'bottom' && LabelField}\r\n      </label>\r\n    </SwitchStyle>\r\n  );\r\n};\r\n\r\nSwitch.propTypes = {\r\n  /** ClassName of the Switch */\r\n  className: PropTypes.string,\r\n\r\n  /** Add Material effect */\r\n  isMaterial: PropTypes.bool,\r\n\r\n  /** labelText of the switch field */\r\n  labelText: PropTypes.string,\r\n\r\n  /** switchSize control switch width and height */\r\n  switchSize: PropTypes.string,\r\n\r\n  /** Set label position of the switch field */\r\n  labelPosition: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\r\n\r\n  /** Switch toggle state based on isChecked prop */\r\n  isChecked: PropTypes.bool,\r\n\r\n  /** Set color for Switch */\r\n  SwitchColor: PropTypes.string,\r\n\r\n  /** Set material bar color for Switch */\r\n  barColor: PropTypes.string,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onBlur: PropTypes.func,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  onFocus: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value`.\r\n   */\r\n  onChange: PropTypes.func\r\n};\r\n\r\nSwitch.defaultProps = {\r\n  isChecked: false,\r\n  labelPosition: 'top',\r\n  onBlur: () => {},\r\n  onFocus: () => {},\r\n  onChange: () => {}\r\n};\r\n\r\nexport default Switch;\r\n"]},"metadata":{},"sourceType":"module"}