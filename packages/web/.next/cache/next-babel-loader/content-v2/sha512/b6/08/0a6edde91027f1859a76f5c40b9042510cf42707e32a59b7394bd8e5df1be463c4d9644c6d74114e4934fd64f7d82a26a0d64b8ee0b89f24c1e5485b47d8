{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\web\\\\components\\\\Input\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport InputField from './Input.style'; // get input focus class\n\nconst getInputFocusClass = value => {\n  if (value !== '' && value != null) {\n    return 'is-focus';\n  } else {\n    return '';\n  }\n};\n\nconst input = props => {\n  let inputElement;\n\n  switch (props.elementType) {\n    case 'input':\n      inputElement = /*#__PURE__*/_jsxDEV(\"input\", _objectSpread(_objectSpread({}, props.elementConfig), {}, {\n        value: props.value,\n        onChange: props.changed,\n        onBlur: props.onBlur\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 'select':\n      inputElement = /*#__PURE__*/_jsxDEV(\"select\", {\n        value: props.value,\n        onChange: props.changed,\n        children: props.elementConfig.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.name\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this);\n      break;\n\n    case 'textarea':\n      inputElement = /*#__PURE__*/_jsxDEV(\"textarea\", _objectSpread(_objectSpread({}, props.elementConfig), {}, {\n        value: props.value,\n        onChange: props.changed,\n        rows: props.rows\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n      break;\n\n    default:\n      inputElement = /*#__PURE__*/_jsxDEV(\"input\", _objectSpread(_objectSpread({}, props), {}, {\n        value: props.value\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 22\n      }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(InputField, {\n    style: props.style,\n    className: `${getInputFocusClass(props.value)}`,\n    children: [inputElement, /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"highlight\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.label,\n      children: [\" \", props.label, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\nexport default input;","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/components/Input/index.js"],"names":["React","InputField","getInputFocusClass","value","input","props","inputElement","elementType","elementConfig","changed","onBlur","options","map","option","name","rows","style","label"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB,C,CAEA;;AACA,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAClC,MAAIA,KAAK,KAAK,EAAV,IAAgBA,KAAK,IAAI,IAA7B,EAAmC;AACjC,WAAO,UAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAND;;AAQA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,MAAIC,YAAJ;;AACA,UAAQD,KAAK,CAACE,WAAd;AACE,SAAK,OAAL;AACED,MAAAA,YAAY,gBACV,iDACMD,KAAK,CAACG,aADZ;AAEE,QAAA,KAAK,EAAEH,KAAK,CAACF,KAFf;AAGE,QAAA,QAAQ,EAAEE,KAAK,CAACI,OAHlB;AAIE,QAAA,MAAM,EAAEJ,KAAK,CAACK;AAJhB;AAAA;AAAA;AAAA;AAAA,cADF;AAQA;;AACF,SAAK,QAAL;AACEJ,MAAAA,YAAY,gBACV;AAAQ,QAAA,KAAK,EAAED,KAAK,CAACF,KAArB;AAA4B,QAAA,QAAQ,EAAEE,KAAK,CAACI,OAA5C;AAAA,kBACGJ,KAAK,CAACG,aAAN,CAAoBG,OAApB,CAA4BC,GAA5B,CAAgCC,MAAM,iBACrC;AAA2B,UAAA,KAAK,EAAEA,MAAM,CAACV,KAAzC;AAAA,oBACGU,MAAM,CAACC;AADV,WAAaD,MAAM,CAACV,KAApB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF;AASA;;AACF,SAAK,UAAL;AACEG,MAAAA,YAAY,gBACV,oDACMD,KAAK,CAACG,aADZ;AAEE,QAAA,KAAK,EAAEH,KAAK,CAACF,KAFf;AAGE,QAAA,QAAQ,EAAEE,KAAK,CAACI,OAHlB;AAIE,QAAA,IAAI,EAAEJ,KAAK,CAACU;AAJd;AAAA;AAAA;AAAA;AAAA,cADF;AAQA;;AACF;AACET,MAAAA,YAAY,gBAAG,iDAAWD,KAAX;AAAkB,QAAA,KAAK,EAAEA,KAAK,CAACF;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAf;AAjCJ;;AAmCA,sBACE,QAAC,UAAD;AACE,IAAA,KAAK,EAAEE,KAAK,CAACW,KADf;AAEE,IAAA,SAAS,EAAG,GAAEd,kBAAkB,CAACG,KAAK,CAACF,KAAP,CAAc,EAFhD;AAAA,eAIGG,YAJH,eAKE;AAAM,MAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAO,MAAA,OAAO,EAAED,KAAK,CAACY,KAAtB;AAAA,sBAA+BZ,KAAK,CAACY,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA/CD;;AAiDA,eAAeb,KAAf","sourcesContent":["import React from 'react';\r\nimport InputField from './Input.style';\r\n\r\n// get input focus class\r\nconst getInputFocusClass = value => {\r\n  if (value !== '' && value != null) {\r\n    return 'is-focus';\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\nconst input = props => {\r\n  let inputElement;\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          onBlur={props.onBlur}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select value={props.value} onChange={props.changed}>\r\n          {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n          rows={props.rows}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = <input {...props} value={props.value} />;\r\n  }\r\n  return (\r\n    <InputField\r\n      style={props.style}\r\n      className={`${getInputFocusClass(props.value)}`}\r\n    >\r\n      {inputElement}\r\n      <span className=\"highlight\" />\r\n      <label htmlFor={props.label}> {props.label} </label>\r\n    </InputField>\r\n  );\r\n};\r\n\r\nexport default input;\r\n"]},"metadata":{},"sourceType":"module"}