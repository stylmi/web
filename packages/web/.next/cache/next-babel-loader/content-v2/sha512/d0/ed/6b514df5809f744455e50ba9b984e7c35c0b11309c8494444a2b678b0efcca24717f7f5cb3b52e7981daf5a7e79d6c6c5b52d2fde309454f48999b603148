{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\reusecore\\\\src\\\\elements\\\\ListGrid\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '../Box';\nimport Button from '../Button';\nimport Loader from '../Loader';\nimport Text from '../Text';\n\nconst LoadMore = ({\n  handleLoadMore,\n  showButton,\n  buttonText,\n  buttonVariant,\n  loaderColor,\n  isLoading,\n  loadMoreComponent,\n  loadMoreWrapperStyle,\n  loadMoreButtonStyle\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showButton ? /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, loadMoreWrapperStyle), {}, {\n      children: loadMoreComponent ? loadMoreComponent : /*#__PURE__*/_jsxDEV(Button, _objectSpread({\n        variant: buttonVariant,\n        title: buttonText || 'Load More',\n        isLoading: isLoading,\n        loader: /*#__PURE__*/_jsxDEV(Loader, {\n          loaderColor: loaderColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 23\n        }, this),\n        onClick: handleLoadMore\n      }, loadMoreButtonStyle), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n};\n\nconst ListGrid = ({\n  data = [],\n  total,\n  component,\n  columnWidth,\n  postCount,\n  totalPost,\n  pagination,\n  paginationComponent,\n  handleLoadMore,\n  loadMoreComponent,\n  infinityScroll,\n  placeholder,\n  loading,\n  isLoading,\n  limit,\n  buttonText,\n  buttonVariant,\n  loaderColor,\n  componentWrapperStyle,\n  componentContainerStyle,\n  loadMoreWrapperStyle,\n  loadMoreButtonStyle,\n  paginationWrapperStyle,\n  className\n}) => {\n  const Limit = limit ? Number(limit) : 1;\n  const limits = [];\n\n  for (let i = 0; i < Limit; i++) {\n    limits.push(i);\n  } // const grabPostNumber = data.length;\n\n\n  let showButton = postCount < totalPost;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, componentWrapperStyle), {}, {\n      className: className,\n      children: [data.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: data.map((item, index) => /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n          width: columnWidth\n        }, componentContainerStyle), {}, {\n          className: \"singleGridBox\",\n          children: component(item, index)\n        }), index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))\n      }, void 0, false) : null, loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: limits.map(index => /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n          width: columnWidth\n        }, componentContainerStyle), {}, {\n          children: placeholder ? placeholder : /*#__PURE__*/_jsxDEV(Text, {\n            content: \"Loading ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 46\n          }, this)\n        }), index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), postCount < totalPost && /*#__PURE__*/_jsxDEV(LoadMore, {\n      showButton: showButton,\n      handleLoadMore: handleLoadMore,\n      isLoading: isLoading,\n      buttonText: buttonText,\n      buttonVariant: buttonVariant,\n      loaderColor: loaderColor,\n      loadMoreComponent: loadMoreComponent,\n      loadMoreButtonStyle: loadMoreButtonStyle,\n      loadMoreWrapperStyle: loadMoreWrapperStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), paginationComponent && /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({}, paginationWrapperStyle), {}, {\n      children: paginationComponent\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\nListGrid.propTypes = {\n  data: PropTypes.array.isRequired,\n  totalPost: PropTypes.number,\n  component: PropTypes.func.isRequired,\n  columnWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n  pagination: PropTypes.bool,\n  paginationComponent: PropTypes.element,\n  handleLoadMore: PropTypes.func,\n  loadMoreComponent: PropTypes.element,\n  infinityScroll: PropTypes.bool,\n  placeholder: PropTypes.element,\n  loading: PropTypes.bool,\n  limit: PropTypes.number,\n  buttonText: PropTypes.string,\n  listWrapperStyle: PropTypes.object,\n  componentWrapperStyle: PropTypes.object,\n  componentContainerStyle: PropTypes.object,\n  loadMoreWrapperStyle: PropTypes.object,\n  loadMoreStyle: PropTypes.object,\n  paginationWrapperStyle: PropTypes.object\n};\nListGrid.defaultProps = {\n  componentWrapperStyle: {\n    flexBox: true,\n    flexWrap: 'wrap',\n    mr: '-1rem',\n    ml: '-1rem'\n  },\n  componentContainerStyle: {\n    pr: '1rem',\n    pl: '1rem'\n  },\n  loadMoreWrapperStyle: {\n    flexBox: true,\n    justifyContent: 'center',\n    mt: '1rem'\n  }\n};\nexport default ListGrid;","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/reusecore/src/elements/ListGrid/index.js"],"names":["React","PropTypes","Box","Button","Loader","Text","LoadMore","handleLoadMore","showButton","buttonText","buttonVariant","loaderColor","isLoading","loadMoreComponent","loadMoreWrapperStyle","loadMoreButtonStyle","ListGrid","data","total","component","columnWidth","postCount","totalPost","pagination","paginationComponent","infinityScroll","placeholder","loading","limit","componentWrapperStyle","componentContainerStyle","paginationWrapperStyle","className","Limit","Number","limits","i","push","length","map","item","index","propTypes","array","isRequired","number","func","oneOfType","string","bool","element","listWrapperStyle","object","loadMoreStyle","defaultProps","flexBox","flexWrap","mr","ml","pr","pl","justifyContent","mt"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,cADgB;AAEhBC,EAAAA,UAFgB;AAGhBC,EAAAA,UAHgB;AAIhBC,EAAAA,aAJgB;AAKhBC,EAAAA,WALgB;AAMhBC,EAAAA,SANgB;AAOhBC,EAAAA,iBAPgB;AAQhBC,EAAAA,oBARgB;AAShBC,EAAAA;AATgB,CAAD,KAUX;AACJ,sBACE;AAAA,cACGP,UAAU,gBACT,QAAC,GAAD,kCAASM,oBAAT;AAAA,gBACGD,iBAAiB,GAChBA,iBADgB,gBAGhB,QAAC,MAAD;AACE,QAAA,OAAO,EAAEH,aADX;AAEE,QAAA,KAAK,EAAED,UAAU,IAAI,WAFvB;AAGE,QAAA,SAAS,EAAEG,SAHb;AAIE,QAAA,MAAM,eAAE,QAAC,MAAD;AAAQ,UAAA,WAAW,EAAED;AAArB;AAAA;AAAA;AAAA;AAAA,gBAJV;AAKE,QAAA,OAAO,EAAEJ;AALX,SAMMQ,mBANN;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YADS,GAeP;AAhBN,mBADF;AAoBD,CA/BD;;AAiCA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,IAAI,GAAG,EADS;AAEhBC,EAAAA,KAFgB;AAGhBC,EAAAA,SAHgB;AAIhBC,EAAAA,WAJgB;AAKhBC,EAAAA,SALgB;AAMhBC,EAAAA,SANgB;AAOhBC,EAAAA,UAPgB;AAQhBC,EAAAA,mBARgB;AAShBjB,EAAAA,cATgB;AAUhBM,EAAAA,iBAVgB;AAWhBY,EAAAA,cAXgB;AAYhBC,EAAAA,WAZgB;AAahBC,EAAAA,OAbgB;AAchBf,EAAAA,SAdgB;AAehBgB,EAAAA,KAfgB;AAgBhBnB,EAAAA,UAhBgB;AAiBhBC,EAAAA,aAjBgB;AAkBhBC,EAAAA,WAlBgB;AAmBhBkB,EAAAA,qBAnBgB;AAoBhBC,EAAAA,uBApBgB;AAqBhBhB,EAAAA,oBArBgB;AAsBhBC,EAAAA,mBAtBgB;AAuBhBgB,EAAAA,sBAvBgB;AAwBhBC,EAAAA;AAxBgB,CAAD,KAyBX;AACJ,QAAMC,KAAK,GAAGL,KAAK,GAAGM,MAAM,CAACN,KAAD,CAAT,GAAmB,CAAtC;AACA,QAAMO,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EAAgC;AAC9BD,IAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACD,GALG,CAMJ;;;AACA,MAAI5B,UAAU,GAAGa,SAAS,GAAGC,SAA7B;AAEA,sBACE;AAAA,4BACE,QAAC,GAAD,kCAASO,qBAAT;AAAgC,MAAA,SAAS,EAAEG,SAA3C;AAAA,iBACGf,IAAI,CAACqB,MAAL,gBACC;AAAA,kBACGrB,IAAI,CAACsB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,kBACR,QAAC,GAAD;AACE,UAAA,KAAK,EAAErB;AADT,WAGMU,uBAHN;AAIE,UAAA,SAAS,EAAC,eAJZ;AAAA,oBAMGX,SAAS,CAACqB,IAAD,EAAOC,KAAP;AANZ,YAEOA,KAFP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,uBADD,GAaG,IAdN,EAeGd,OAAO,iBACN;AAAA,kBACGQ,MAAM,CAACI,GAAP,CAAWE,KAAK,iBACf,QAAC,GAAD;AAAK,UAAA,KAAK,EAAErB;AAAZ,WAAyCU,uBAAzC;AAAA,oBACGJ,WAAW,GAAGA,WAAH,gBAAiB,QAAC,IAAD;AAAM,YAAA,OAAO,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA;AAD/B,YAA8Be,KAA9B;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,uBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EA0BGpB,SAAS,GAAGC,SAAZ,iBACC,QAAC,QAAD;AACE,MAAA,UAAU,EAAEd,UADd;AAEE,MAAA,cAAc,EAAED,cAFlB;AAGE,MAAA,SAAS,EAAEK,SAHb;AAIE,MAAA,UAAU,EAAEH,UAJd;AAKE,MAAA,aAAa,EAAEC,aALjB;AAME,MAAA,WAAW,EAAEC,WANf;AAOE,MAAA,iBAAiB,EAAEE,iBAPrB;AAQE,MAAA,mBAAmB,EAAEE,mBARvB;AASE,MAAA,oBAAoB,EAAED;AATxB;AAAA;AAAA;AAAA;AAAA,YA3BJ,EAuCGU,mBAAmB,iBAClB,QAAC,GAAD,kCAASO,sBAAT;AAAA,gBAAkCP;AAAlC;AAAA;AAAA;AAAA;AAAA,YAxCJ;AAAA,kBADF;AA6CD,CA/ED;;AAiFAR,QAAQ,CAAC0B,SAAT,GAAqB;AACnBzB,EAAAA,IAAI,EAAEhB,SAAS,CAAC0C,KAAV,CAAgBC,UADH;AAEnBtB,EAAAA,SAAS,EAAErB,SAAS,CAAC4C,MAFF;AAGnB1B,EAAAA,SAAS,EAAElB,SAAS,CAAC6C,IAAV,CAAeF,UAHP;AAInBxB,EAAAA,WAAW,EAAEnB,SAAS,CAAC8C,SAAV,CAAoB,CAC/B9C,SAAS,CAAC+C,MADqB,EAE/B/C,SAAS,CAAC4C,MAFqB,EAG/B5C,SAAS,CAAC0C,KAHqB,CAApB,CAJM;AASnBpB,EAAAA,UAAU,EAAEtB,SAAS,CAACgD,IATH;AAUnBzB,EAAAA,mBAAmB,EAAEvB,SAAS,CAACiD,OAVZ;AAWnB3C,EAAAA,cAAc,EAAEN,SAAS,CAAC6C,IAXP;AAYnBjC,EAAAA,iBAAiB,EAAEZ,SAAS,CAACiD,OAZV;AAanBzB,EAAAA,cAAc,EAAExB,SAAS,CAACgD,IAbP;AAcnBvB,EAAAA,WAAW,EAAEzB,SAAS,CAACiD,OAdJ;AAenBvB,EAAAA,OAAO,EAAE1B,SAAS,CAACgD,IAfA;AAgBnBrB,EAAAA,KAAK,EAAE3B,SAAS,CAAC4C,MAhBE;AAiBnBpC,EAAAA,UAAU,EAAER,SAAS,CAAC+C,MAjBH;AAkBnBG,EAAAA,gBAAgB,EAAElD,SAAS,CAACmD,MAlBT;AAmBnBvB,EAAAA,qBAAqB,EAAE5B,SAAS,CAACmD,MAnBd;AAoBnBtB,EAAAA,uBAAuB,EAAE7B,SAAS,CAACmD,MApBhB;AAqBnBtC,EAAAA,oBAAoB,EAAEb,SAAS,CAACmD,MArBb;AAsBnBC,EAAAA,aAAa,EAAEpD,SAAS,CAACmD,MAtBN;AAuBnBrB,EAAAA,sBAAsB,EAAE9B,SAAS,CAACmD;AAvBf,CAArB;AA0BApC,QAAQ,CAACsC,YAAT,GAAwB;AACtBzB,EAAAA,qBAAqB,EAAE;AACrB0B,IAAAA,OAAO,EAAE,IADY;AAErBC,IAAAA,QAAQ,EAAE,MAFW;AAGrBC,IAAAA,EAAE,EAAE,OAHiB;AAIrBC,IAAAA,EAAE,EAAE;AAJiB,GADD;AAOtB5B,EAAAA,uBAAuB,EAAE;AACvB6B,IAAAA,EAAE,EAAE,MADmB;AAEvBC,IAAAA,EAAE,EAAE;AAFmB,GAPH;AAWtB9C,EAAAA,oBAAoB,EAAE;AACpByC,IAAAA,OAAO,EAAE,IADW;AAEpBM,IAAAA,cAAc,EAAE,QAFI;AAGpBC,IAAAA,EAAE,EAAE;AAHgB;AAXA,CAAxB;AAkBA,eAAe9C,QAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '../Box';\r\nimport Button from '../Button';\r\nimport Loader from '../Loader';\r\nimport Text from '../Text';\r\n\r\nconst LoadMore = ({\r\n  handleLoadMore,\r\n  showButton,\r\n  buttonText,\r\n  buttonVariant,\r\n  loaderColor,\r\n  isLoading,\r\n  loadMoreComponent,\r\n  loadMoreWrapperStyle,\r\n  loadMoreButtonStyle\r\n}) => {\r\n  return (\r\n    <>\r\n      {showButton ? (\r\n        <Box {...loadMoreWrapperStyle}>\r\n          {loadMoreComponent ? (\r\n            loadMoreComponent\r\n          ) : (\r\n            <Button\r\n              variant={buttonVariant}\r\n              title={buttonText || 'Load More'}\r\n              isLoading={isLoading}\r\n              loader={<Loader loaderColor={loaderColor} />}\r\n              onClick={handleLoadMore}\r\n              {...loadMoreButtonStyle}\r\n            />\r\n          )}\r\n        </Box>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ListGrid = ({\r\n  data = [],\r\n  total,\r\n  component,\r\n  columnWidth,\r\n  postCount,\r\n  totalPost,\r\n  pagination,\r\n  paginationComponent,\r\n  handleLoadMore,\r\n  loadMoreComponent,\r\n  infinityScroll,\r\n  placeholder,\r\n  loading,\r\n  isLoading,\r\n  limit,\r\n  buttonText,\r\n  buttonVariant,\r\n  loaderColor,\r\n  componentWrapperStyle,\r\n  componentContainerStyle,\r\n  loadMoreWrapperStyle,\r\n  loadMoreButtonStyle,\r\n  paginationWrapperStyle,\r\n  className\r\n}) => {\r\n  const Limit = limit ? Number(limit) : 1;\r\n  const limits = [];\r\n  for (let i = 0; i < Limit; i++) {\r\n    limits.push(i);\r\n  }\r\n  // const grabPostNumber = data.length;\r\n  let showButton = postCount < totalPost;\r\n\r\n  return (\r\n    <>\r\n      <Box {...componentWrapperStyle} className={className}>\r\n        {data.length ? (\r\n          <>\r\n            {data.map((item, index) => (\r\n              <Box\r\n                width={columnWidth}\r\n                key={index}\r\n                {...componentContainerStyle}\r\n                className=\"singleGridBox\"\r\n              >\r\n                {component(item, index)}\r\n              </Box>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n        {loading && (\r\n          <>\r\n            {limits.map(index => (\r\n              <Box width={columnWidth} key={index} {...componentContainerStyle}>\r\n                {placeholder ? placeholder : <Text content=\"Loading ...\" />}\r\n              </Box>\r\n            ))}\r\n          </>\r\n        )}\r\n      </Box>\r\n      {postCount < totalPost && (\r\n        <LoadMore\r\n          showButton={showButton}\r\n          handleLoadMore={handleLoadMore}\r\n          isLoading={isLoading}\r\n          buttonText={buttonText}\r\n          buttonVariant={buttonVariant}\r\n          loaderColor={loaderColor}\r\n          loadMoreComponent={loadMoreComponent}\r\n          loadMoreButtonStyle={loadMoreButtonStyle}\r\n          loadMoreWrapperStyle={loadMoreWrapperStyle}\r\n        />\r\n      )}\r\n      {paginationComponent && (\r\n        <Box {...paginationWrapperStyle}>{paginationComponent}</Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nListGrid.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  totalPost: PropTypes.number,\r\n  component: PropTypes.func.isRequired,\r\n  columnWidth: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  pagination: PropTypes.bool,\r\n  paginationComponent: PropTypes.element,\r\n  handleLoadMore: PropTypes.func,\r\n  loadMoreComponent: PropTypes.element,\r\n  infinityScroll: PropTypes.bool,\r\n  placeholder: PropTypes.element,\r\n  loading: PropTypes.bool,\r\n  limit: PropTypes.number,\r\n  buttonText: PropTypes.string,\r\n  listWrapperStyle: PropTypes.object,\r\n  componentWrapperStyle: PropTypes.object,\r\n  componentContainerStyle: PropTypes.object,\r\n  loadMoreWrapperStyle: PropTypes.object,\r\n  loadMoreStyle: PropTypes.object,\r\n  paginationWrapperStyle: PropTypes.object\r\n};\r\n\r\nListGrid.defaultProps = {\r\n  componentWrapperStyle: {\r\n    flexBox: true,\r\n    flexWrap: 'wrap',\r\n    mr: '-1rem',\r\n    ml: '-1rem'\r\n  },\r\n  componentContainerStyle: {\r\n    pr: '1rem',\r\n    pl: '1rem'\r\n  },\r\n  loadMoreWrapperStyle: {\r\n    flexBox: true,\r\n    justifyContent: 'center',\r\n    mt: '1rem'\r\n  }\r\n};\r\n\r\nexport default ListGrid;\r\n"]},"metadata":{},"sourceType":"module"}