{"ast":null,"code":"import _extends from \"C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\reusecore\\\\src\\\\elements\\\\Drawer\\\\index.js\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nvar Drawer = function Drawer(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      closeButton = _ref.closeButton,\n      closeButtonStyle = _ref.closeButtonStyle,\n      drawerHandler = _ref.drawerHandler,\n      toggleHandler = _ref.toggleHandler,\n      open = _ref.open,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\"]);\n\n  // Add all classs to an array\n  var addAllClasses = ['reusecore__drawer']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(RcDrawer, _extends({\n    open: open,\n    onMaskClick: toggleHandler,\n    className: addAllClasses.join(' ')\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"reusecore-drawer__close\",\n    onClick: toggleHandler,\n    style: closeButtonStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, closeButton), children));\n};\n\n_c = Drawer;\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element\n};\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\nexport default Drawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/reusecore/src/elements/Drawer/index.js"],"names":["React","Fragment","PropTypes","RcDrawer","Drawer","className","children","closeButton","closeButtonStyle","drawerHandler","toggleHandler","open","props","addAllClasses","push","join","propTypes","string","element","width","placement","oneOf","defaultProps","handler","level"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,4BAAP;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAST;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,WAMI,QANJA,WAMI;AAAA,MALJC,gBAKI,QALJA,gBAKI;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,aAGI,QAHJA,aAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,KACC;;AACJ;AACA,MAAMC,aAAa,GAAG,CAAC,mBAAD,CAAtB,CAFI,CAIJ;;AACA,MAAIR,SAAJ,EAAe;AACbQ,IAAAA,aAAa,CAACC,IAAd,CAAmBT,SAAnB;AACD;;AAED,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,IAAI,EAAEM,IADR;AAEE,IAAA,WAAW,EAAED,aAFf;AAGE,IAAA,SAAS,EAAEG,aAAa,CAACE,IAAd,CAAmB,GAAnB;AAHb,KAIMH,KAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAME;AACE,IAAA,SAAS,EAAC,yBADZ;AAEE,IAAA,OAAO,EAAEF,aAFX;AAGE,IAAA,KAAK,EAAEF,gBAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,WALH,CANF,EAaGD,QAbH,CADF,CADF;AA0BD,CA5CD;;KAAMF,M;AA8CNA,MAAM,CAACY,SAAP,GAAmB;AACjB;AACAX,EAAAA,SAAS,EAAEH,SAAS,CAACe,MAFJ;;AAIjB;AACAV,EAAAA,WAAW,EAAEL,SAAS,CAACgB,OALN;;AAOjB;AACAC,EAAAA,KAAK,EAAEjB,SAAS,CAACe,MARA;;AAUjB;AACAG,EAAAA,SAAS,EAAElB,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,CAAhB,CAXM;;AAajB;AACA;AACAZ,EAAAA,aAAa,EAAEP,SAAS,CAACgB;AAfR,CAAnB;AAkBAd,MAAM,CAACkB,YAAP,GAAsB;AACpBH,EAAAA,KAAK,EAAE,OADa;AAEpBI,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;AAMA,eAAepB,MAAf","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RcDrawer from 'rc-drawer';\r\nimport 'rc-drawer/assets/index.css';\r\n\r\nconst Drawer = ({\r\n  className,\r\n  children,\r\n  closeButton,\r\n  closeButtonStyle,\r\n  drawerHandler,\r\n  toggleHandler,\r\n  open,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__drawer'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <RcDrawer\r\n        open={open}\r\n        onMaskClick={toggleHandler}\r\n        className={addAllClasses.join(' ')}\r\n        {...props}\r\n      >\r\n        <div\r\n          className=\"reusecore-drawer__close\"\r\n          onClick={toggleHandler}\r\n          style={closeButtonStyle}\r\n        >\r\n          {closeButton}\r\n        </div>\r\n        {children}\r\n      </RcDrawer>\r\n      {/* <div\r\n        className=\"reusecore-drawer__handler\"\r\n        style={{ display: 'inline-block' }}\r\n        onClick={toggleHandler}\r\n      >\r\n        {drawerHandler}\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nDrawer.propTypes = {\r\n  /** ClassName of the Drawer */\r\n  className: PropTypes.string,\r\n\r\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\r\n  closeButton: PropTypes.element,\r\n\r\n  /** Set drawer width. Default value is 300px. */\r\n  width: PropTypes.string,\r\n\r\n  /** Set drawer position left || right || top || bottom. */\r\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\r\n\r\n  /** drawerHandler could be button, icon, string or any component */\r\n  // drawerHandler: PropTypes.element.isRequired\r\n  drawerHandler: PropTypes.element\r\n};\r\n\r\nDrawer.defaultProps = {\r\n  width: '300px',\r\n  handler: false,\r\n  level: null\r\n};\r\n\r\nexport default Drawer;\r\n"]},"metadata":{},"sourceType":"module"}