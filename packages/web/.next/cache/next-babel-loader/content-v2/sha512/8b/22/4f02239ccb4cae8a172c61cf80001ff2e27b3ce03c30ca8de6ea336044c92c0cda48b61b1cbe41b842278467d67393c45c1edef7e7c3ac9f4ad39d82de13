{"ast":null,"code":"import _defineProperty from \"/Users/mrcea/Desktop/Nunua/template/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/Users/mrcea/Desktop/Nunua/template/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/node_modules/reusecore/src/elements/Drawer/index.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nvar Drawer = function Drawer(_ref) {\n  var className = _ref.className,\n      children = _ref.children,\n      closeButton = _ref.closeButton,\n      closeButtonStyle = _ref.closeButtonStyle,\n      drawerHandler = _ref.drawerHandler,\n      toggleHandler = _ref.toggleHandler,\n      open = _ref.open,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\"]);\n\n  // Add all classs to an array\n  var addAllClasses = ['reusecore__drawer']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RcDrawer, _objectSpread(_objectSpread({\n      open: open,\n      onMaskClick: toggleHandler,\n      className: addAllClasses.join(' ')\n    }, props), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reusecore-drawer__close\",\n        onClick: toggleHandler,\n        style: closeButtonStyle,\n        children: closeButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, _this), children]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Drawer;\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element\n};\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\nexport default Drawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Drawer\");","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/node_modules/reusecore/src/elements/Drawer/index.js"],"names":["React","Fragment","PropTypes","RcDrawer","Drawer","className","children","closeButton","closeButtonStyle","drawerHandler","toggleHandler","open","props","addAllClasses","push","join","propTypes","string","element","width","placement","oneOf","defaultProps","handler","level"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,4BAAP;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAST;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,QAOI,QAPJA,QAOI;AAAA,MANJC,WAMI,QANJA,WAMI;AAAA,MALJC,gBAKI,QALJA,gBAKI;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,aAGI,QAHJA,aAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,KACC;;AACJ;AACA,MAAMC,aAAa,GAAG,CAAC,mBAAD,CAAtB,CAFI,CAIJ;;AACA,MAAIR,SAAJ,EAAe;AACbQ,IAAAA,aAAa,CAACC,IAAd,CAAmBT,SAAnB;AACD;;AAED,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,IAAI,EAAEM,IADR;AAEE,MAAA,WAAW,EAAED,aAFf;AAGE,MAAA,SAAS,EAAEG,aAAa,CAACE,IAAd,CAAmB,GAAnB;AAHb,OAIMH,KAJN;AAAA,8BAME;AACE,QAAA,SAAS,EAAC,yBADZ;AAEE,QAAA,OAAO,EAAEF,aAFX;AAGE,QAAA,KAAK,EAAEF,gBAHT;AAAA,kBAKGD;AALH;AAAA;AAAA;AAAA;AAAA,eANF,EAaGD,QAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AA0BD,CA5CD;;KAAMF,M;AA8CNA,MAAM,CAACY,SAAP,GAAmB;AACjB;AACAX,EAAAA,SAAS,EAAEH,SAAS,CAACe,MAFJ;;AAIjB;AACAV,EAAAA,WAAW,EAAEL,SAAS,CAACgB,OALN;;AAOjB;AACAC,EAAAA,KAAK,EAAEjB,SAAS,CAACe,MARA;;AAUjB;AACAG,EAAAA,SAAS,EAAElB,SAAS,CAACmB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,CAAhB,CAXM;;AAajB;AACA;AACAZ,EAAAA,aAAa,EAAEP,SAAS,CAACgB;AAfR,CAAnB;AAkBAd,MAAM,CAACkB,YAAP,GAAsB;AACpBH,EAAAA,KAAK,EAAE,OADa;AAEpBI,EAAAA,OAAO,EAAE,KAFW;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;AAMA,eAAepB,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport RcDrawer from 'rc-drawer';\nimport 'rc-drawer/assets/index.css';\n\nconst Drawer = ({\n  className,\n  children,\n  closeButton,\n  closeButtonStyle,\n  drawerHandler,\n  toggleHandler,\n  open,\n  ...props\n}) => {\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__drawer'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <Fragment>\n      <RcDrawer\n        open={open}\n        onMaskClick={toggleHandler}\n        className={addAllClasses.join(' ')}\n        {...props}\n      >\n        <div\n          className=\"reusecore-drawer__close\"\n          onClick={toggleHandler}\n          style={closeButtonStyle}\n        >\n          {closeButton}\n        </div>\n        {children}\n      </RcDrawer>\n      {/* <div\n        className=\"reusecore-drawer__handler\"\n        style={{ display: 'inline-block' }}\n        onClick={toggleHandler}\n      >\n        {drawerHandler}\n      </div> */}\n    </Fragment>\n  );\n};\n\nDrawer.propTypes = {\n  /** ClassName of the Drawer */\n  className: PropTypes.string,\n\n  /** Used to render icon, button, text or any elements inside the closeButton prop. */\n  closeButton: PropTypes.element,\n\n  /** Set drawer width. Default value is 300px. */\n  width: PropTypes.string,\n\n  /** Set drawer position left || right || top || bottom. */\n  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n\n  /** drawerHandler could be button, icon, string or any component */\n  // drawerHandler: PropTypes.element.isRequired\n  drawerHandler: PropTypes.element\n};\n\nDrawer.defaultProps = {\n  width: '300px',\n  handler: false,\n  level: null\n};\n\nexport default Drawer;\n"]},"metadata":{},"sourceType":"module"}