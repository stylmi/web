{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\web\\\\pages\\\\recent-posts.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_ALL_POST } from '../../core/graphql/AllPost.query';\nimport { CURRENCY } from '../Config';\nimport { SINGLE_POST_PAGE } from '../../core/navigation/constant';\nimport withLayout from '../hoc/withLayout';\nimport Heading from '../../reusecore/src/elements/Heading';\nimport Box from '../../reusecore/src/elements/Box';\nimport ListGrid from '../../reusecore/src/elements/ListGrid';\nimport CardLoader from '../components/Loader/CardLoader';\nimport PostCard from '../components/PostCard';\nimport NoItemFound from '../components/NoItemFound';\nimport OnError from '../components/OnError';\nimport PageMeta from '../components/PageMeta';\nimport { withApollo } from '../helpers/apollo';\nexport default withApollo(withLayout(() => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const QUERY_VARIABLES = {\n    LIMIT: 20\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_ALL_POST, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }\n  });\n  const postCount = data && data.posts && data.posts.data ? data.posts.data.length : 1;\n  const posts = data && data.posts && data.posts.data ? data.posts.data : [];\n  const totalPost = data && data.posts ? data.posts.total : 1;\n\n  const renderRecentPost = item => {\n    const {\n      title,\n      slug,\n      price = 0.0,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return __jsx(Link, {\n      href: `${SINGLE_POST_PAGE}/${slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(PageMeta, {\n    title: \"Recent Post\",\n    description: \"Recent Post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), __jsx(Box, {\n    mt: 50,\n    mb: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    content: \"Recent Posts\",\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), !loading && !posts.length ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }) : __jsx(ListGrid, {\n    data: posts,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderRecentPost,\n    loading: loading ? loading : loadingMore,\n    loaderColor: \"#ffffff\",\n    placeholder: __jsx(CardLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 30\n      }\n    }),\n    limit: QUERY_VARIABLES.LIMIT,\n    handleLoadMore: () => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              return Object.assign({}, prev, {\n                posts: {\n                  data: [...prev.posts.data, ...fetchMoreResult.posts.data],\n                  total: totalPost\n                }\n              });\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }))));\n}));","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/pages/recent-posts.js"],"names":["useState","Link","Grid","useQuery","GET_ALL_POST","CURRENCY","SINGLE_POST_PAGE","withLayout","Heading","Box","ListGrid","CardLoader","PostCard","NoItemFound","OnError","PageMeta","withApollo","loadingMore","toggleLoading","page","paginate","QUERY_VARIABLES","LIMIT","data","loading","error","fetchMore","variables","postCount","posts","length","totalPost","total","renderRecentPost","item","title","slug","price","image","url","largeUrl","fontSize","fontWeight","color","updateQuery","prev","fetchMoreResult","Object","assign"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport Link from 'next/link';\r\nimport { Grid } from 'react-styled-flexboxgrid';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { GET_ALL_POST } from '../../core/graphql/AllPost.query';\r\nimport { CURRENCY } from '../Config';\r\nimport { SINGLE_POST_PAGE } from '../../core/navigation/constant';\r\nimport withLayout from '../hoc/withLayout';\r\nimport Heading from '../../reusecore/src/elements/Heading';\r\nimport Box from '../../reusecore/src/elements/Box';\r\nimport ListGrid from '../../reusecore/src/elements/ListGrid';\r\nimport CardLoader from '../components/Loader/CardLoader';\r\nimport PostCard from '../components/PostCard';\r\nimport NoItemFound from '../components/NoItemFound';\r\nimport OnError from '../components/OnError';\r\nimport PageMeta from '../components/PageMeta';\r\nimport { withApollo } from '../helpers/apollo';\r\nexport default withApollo(\r\n  withLayout(() => {\r\n    const [loadingMore, toggleLoading] = useState(false);\r\n    const [page, paginate] = useState(1);\r\n    const QUERY_VARIABLES = {\r\n      LIMIT: 20,\r\n    };\r\n    const { data, loading, error, fetchMore } = useQuery(GET_ALL_POST, {\r\n      variables: QUERY_VARIABLES,\r\n    });\r\n\r\n    if (error) return <OnError />;\r\n\r\n    const postCount =\r\n      data && data.posts && data.posts.data ? data.posts.data.length : 1;\r\n    const posts = data && data.posts && data.posts.data ? data.posts.data : [];\r\n    const totalPost = data && data.posts ? data.posts.total : 1;\r\n    const renderRecentPost = item => {\r\n      const {\r\n        title,\r\n        slug,\r\n        price = 0.0,\r\n        image: { url, largeUrl },\r\n      } = item;\r\n      return (\r\n        <Link href={`${SINGLE_POST_PAGE}/${slug}`}>\r\n          <a>\r\n            <PostCard\r\n              currency={CURRENCY}\r\n              title={title}\r\n              price={price}\r\n              imageSrc={[url, largeUrl]}\r\n            />\r\n          </a>\r\n        </Link>\r\n      );\r\n    };\r\n    return (\r\n      <>\r\n        <PageMeta title=\"Recent Post\" description=\"Recent Post\" />\r\n        <Box mt={50} mb={50}>\r\n          <Grid>\r\n            <Heading\r\n              content=\"Recent Posts\"\r\n              mb={40}\r\n              style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\r\n            />\r\n            {!loading && !posts.length ? (\r\n              <NoItemFound />\r\n            ) : (\r\n              <ListGrid\r\n                data={posts}\r\n                totalPost={totalPost}\r\n                postCount={postCount}\r\n                columnWidth={[1, 1 / 2, 1 / 4]}\r\n                component={renderRecentPost}\r\n                loading={loading ? loading : loadingMore}\r\n                loaderColor=\"#ffffff\"\r\n                placeholder={<CardLoader />}\r\n                limit={QUERY_VARIABLES.LIMIT}\r\n                handleLoadMore={() => {\r\n                  toggleLoading(true);\r\n                  paginate(page + 1);\r\n                  fetchMore({\r\n                    variables: {\r\n                      page: page + 1,\r\n                    },\r\n                    updateQuery: (prev, { fetchMoreResult }) => {\r\n                      if (!fetchMoreResult) {\r\n                        toggleLoading(false);\r\n                        return prev;\r\n                      }\r\n                      if (postCount && totalPost) {\r\n                        if (postCount <= totalPost) {\r\n                          toggleLoading(false);\r\n                          return Object.assign({}, prev, {\r\n                            posts: {\r\n                              data: [\r\n                                ...prev.posts.data,\r\n                                ...fetchMoreResult.posts.data,\r\n                              ],\r\n                              total: totalPost,\r\n                            },\r\n                          });\r\n                        }\r\n                      }\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </>\r\n    );\r\n  })\r\n);\r\n"]},"metadata":{},"sourceType":"module"}