{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olaji\\\\OneDrive\\\\Documents\\\\sellit\\\\template\\\\packages\\\\web\\\\pages\\\\category\\\\[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { Grid } from 'react-styled-flexboxgrid';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_CATEGORY_POST } from '../../../core/graphql/CategoryPost.query';\nimport { CURRENCY } from '../../Config';\nimport { SINGLE_POST_PAGE } from '../../../core/navigation/constant';\nimport withLayout from '../../hoc/withLayout';\nimport Box from '../../../reusecore/src/elements/Box';\nimport Heading from '../../../reusecore/src/elements/Heading';\nimport ListGrid from '../../../reusecore/src/elements/ListGrid';\nimport CardLoader from '../../components/Loader/CardLoader';\nimport PostCard from '../../components/PostCard';\nimport NoItemFound from '../../components/NoItemFound';\nimport OnError from '../../components/OnError';\nimport PageMeta from '../../components/PageMeta';\nimport { withApollo } from '../../helpers/apollo';\n\nconst SingleCategory = ({\n  data,\n  loading,\n  fetchMore,\n  limit\n}) => {\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    0: page,\n    1: paginate\n  } = useState(1);\n  const fetchedCategoryPost = data && data.category ? data.category.posts.data : [];\n  const postCount = fetchedCategoryPost.length;\n  const totalPost = data && data.category ? data.category.posts.total : null;\n  const categoryName = data && data.category ? data.category.name : null;\n\n  const renderCategoryPost = item => {\n    const {\n      title,\n      price = `0.00`,\n      slug,\n      image: {\n        url,\n        largeUrl\n      }\n    } = item;\n    return __jsx(Link, {\n      href: `${SINGLE_POST_PAGE}/[slug]`,\n      as: `${SINGLE_POST_PAGE}/${slug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, __jsx(PostCard, {\n      currency: CURRENCY,\n      title: title,\n      price: price,\n      imageSrc: [url, largeUrl],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return __jsx(Box, {\n    mt: 50,\n    mb: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    content: categoryName,\n    mb: 40,\n    style: {\n      fontSize: 24,\n      fontWeight: 600,\n      color: '#333333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), !fetchedCategoryPost ? __jsx(NoItemFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }) : __jsx(ListGrid, {\n    data: fetchedCategoryPost,\n    totalPost: totalPost,\n    postCount: postCount,\n    columnWidth: [1, 1 / 2, 1 / 4],\n    component: renderCategoryPost,\n    loading: loading ? loading : loadingMore,\n    isLoading: loadingMore,\n    placeholder: __jsx(CardLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 26\n      }\n    }),\n    limit: limit,\n    handleLoadMore: loading => {\n      toggleLoading(true);\n      paginate(page + 1);\n      fetchMore({\n        variables: {\n          page: page + 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) {\n            toggleLoading(false);\n            return prev;\n          }\n\n          const oldPosts = prev.category.posts.data;\n          const newPosts = fetchMoreResult.category.posts.data;\n\n          if (postCount && totalPost) {\n            if (postCount <= totalPost) {\n              toggleLoading(false);\n              const concatedPosts = oldPosts.concat(newPosts);\n              fetchMoreResult.category.posts.data = concatedPosts;\n              return fetchMoreResult;\n            }\n          }\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default withApollo(withLayout(() => {\n  const {\n    query: {\n      slug\n    }\n  } = useRouter();\n  let QUERY_VARIABLES = {\n    SLUG: slug,\n    LIMIT: 20\n  };\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery(GET_CATEGORY_POST, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return __jsx(OnError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 23\n    }\n  });\n  const {\n    name\n  } = data && data.category ? data.category : '';\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, __jsx(PageMeta, {\n    title: name,\n    description: \"Product categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), __jsx(SingleCategory, {\n    data: data,\n    loading: loading,\n    fetchMore: fetchMore,\n    limit: QUERY_VARIABLES.LIMIT,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }));\n}));","map":{"version":3,"sources":["C:/Users/olaji/OneDrive/Documents/sellit/template/packages/web/pages/category/[slug].js"],"names":["Fragment","useState","useRouter","Link","Grid","useQuery","GET_CATEGORY_POST","CURRENCY","SINGLE_POST_PAGE","withLayout","Box","Heading","ListGrid","CardLoader","PostCard","NoItemFound","OnError","PageMeta","withApollo","SingleCategory","data","loading","fetchMore","limit","loadingMore","toggleLoading","page","paginate","fetchedCategoryPost","category","posts","postCount","length","totalPost","total","categoryName","name","renderCategoryPost","item","title","price","slug","image","url","largeUrl","fontSize","fontWeight","color","variables","updateQuery","prev","fetchMoreResult","oldPosts","newPosts","concatedPosts","concat","query","QUERY_VARIABLES","SLUG","LIMIT","error"],"mappings":"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","sourcesContent":["import { Fragment, useState } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport { Grid } from 'react-styled-flexboxgrid';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { GET_CATEGORY_POST } from '../../../core/graphql/CategoryPost.query';\r\nimport { CURRENCY } from '../../Config';\r\nimport { SINGLE_POST_PAGE } from '../../../core/navigation/constant';\r\nimport withLayout from '../../hoc/withLayout';\r\nimport Box from '../../../reusecore/src/elements/Box';\r\nimport Heading from '../../../reusecore/src/elements/Heading';\r\nimport ListGrid from '../../../reusecore/src/elements/ListGrid';\r\nimport CardLoader from '../../components/Loader/CardLoader';\r\nimport PostCard from '../../components/PostCard';\r\nimport NoItemFound from '../../components/NoItemFound';\r\nimport OnError from '../../components/OnError';\r\nimport PageMeta from '../../components/PageMeta';\r\nimport { withApollo } from '../../helpers/apollo';\r\nconst SingleCategory = ({ data, loading, fetchMore, limit }) => {\r\n  const [loadingMore, toggleLoading] = useState(false);\r\n  const [page, paginate] = useState(1);\r\n  const fetchedCategoryPost =\r\n    data && data.category ? data.category.posts.data : [];\r\n  const postCount = fetchedCategoryPost.length;\r\n  const totalPost = data && data.category ? data.category.posts.total : null;\r\n  const categoryName = data && data.category ? data.category.name : null;\r\n\r\n  const renderCategoryPost = item => {\r\n    const {\r\n      title,\r\n      price = `0.00`,\r\n      slug,\r\n      image: { url, largeUrl },\r\n    } = item;\r\n    return (\r\n      <Link\r\n        href={`${SINGLE_POST_PAGE}/[slug]`}\r\n        as={`${SINGLE_POST_PAGE}/${slug}`}\r\n      >\r\n        <a>\r\n          <PostCard\r\n            currency={CURRENCY}\r\n            title={title}\r\n            price={price}\r\n            imageSrc={[url, largeUrl]}\r\n          />\r\n        </a>\r\n      </Link>\r\n    );\r\n  };\r\n  return (\r\n    <Box mt={50} mb={50}>\r\n      <Grid>\r\n        <Heading\r\n          content={categoryName}\r\n          mb={40}\r\n          style={{ fontSize: 24, fontWeight: 600, color: '#333333' }}\r\n        />\r\n        {!fetchedCategoryPost ? (\r\n          <NoItemFound />\r\n        ) : (\r\n          <ListGrid\r\n            data={fetchedCategoryPost}\r\n            totalPost={totalPost}\r\n            postCount={postCount}\r\n            columnWidth={[1, 1 / 2, 1 / 4]}\r\n            component={renderCategoryPost}\r\n            loading={loading ? loading : loadingMore}\r\n            isLoading={loadingMore}\r\n            placeholder={<CardLoader />}\r\n            limit={limit}\r\n            handleLoadMore={loading => {\r\n              toggleLoading(true);\r\n              paginate(page + 1);\r\n              fetchMore({\r\n                variables: {\r\n                  page: page + 1,\r\n                },\r\n                updateQuery: (prev, { fetchMoreResult }) => {\r\n                  if (!fetchMoreResult) {\r\n                    toggleLoading(false);\r\n                    return prev;\r\n                  }\r\n                  const oldPosts = prev.category.posts.data;\r\n                  const newPosts = fetchMoreResult.category.posts.data;\r\n                  if (postCount && totalPost) {\r\n                    if (postCount <= totalPost) {\r\n                      toggleLoading(false);\r\n                      const concatedPosts = oldPosts.concat(newPosts);\r\n                      fetchMoreResult.category.posts.data = concatedPosts;\r\n                      return fetchMoreResult;\r\n                    }\r\n                  }\r\n                },\r\n              });\r\n            }}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default withApollo(\r\n  withLayout(() => {\r\n    const {\r\n      query: { slug },\r\n    } = useRouter();\r\n    let QUERY_VARIABLES = {\r\n      SLUG: slug,\r\n      LIMIT: 20,\r\n    };\r\n    const { data, loading, error, fetchMore } = useQuery(GET_CATEGORY_POST, {\r\n      variables: QUERY_VARIABLES,\r\n    });\r\n\r\n    if (error) return <OnError />;\r\n\r\n    const { name } = data && data.category ? data.category : '';\r\n    return (\r\n      <Fragment>\r\n        <PageMeta title={name} description=\"Product categories\" />\r\n        <SingleCategory\r\n          data={data}\r\n          loading={loading}\r\n          fetchMore={fetchMore}\r\n          limit={QUERY_VARIABLES.LIMIT}\r\n        />\r\n      </Fragment>\r\n    );\r\n  })\r\n);\r\n"]},"metadata":{},"sourceType":"module"}