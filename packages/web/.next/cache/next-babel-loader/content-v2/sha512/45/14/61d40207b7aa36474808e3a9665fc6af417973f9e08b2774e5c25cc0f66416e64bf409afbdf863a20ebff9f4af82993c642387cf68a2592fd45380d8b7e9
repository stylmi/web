{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/components/InputGooglePlace/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nconst LocationSearchInput = props => {\n  const {\n    0: addressState,\n    1: setAddressState\n  } = useState({\n    address: props.address || ''\n  });\n\n  const handleChange = address => {\n    setAddressState(_objectSpread(_objectSpread({}, addressState), {}, {\n      address\n    }));\n  };\n\n  const handleSelect = selected => {\n    setAddressState(_objectSpread(_objectSpread({}, addressState), {}, {\n      address: selected\n    }));\n    const address = selected;\n    props.handleAddress(address);\n    geocodeByAddress(selected).then(results => getLatLng(results[0])).then(latLng => props.handleLocation(latLng)).catch(error => console.error('Error', error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n    value: addressState.address,\n    onChange: handleChange,\n    onSelect: handleSelect,\n    children: ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/_jsxDEV(LocationWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, getInputProps()), {}, {\n          required: \"required\",\n          label: \"Location\"\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), addressState.address && /*#__PURE__*/_jsxDEV(SearchResultWrapper, {\n        className: \"autocomplete-dropdown-container\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 27\n        }, this), suggestions.map(suggestion => {\n          const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item';\n          const style = suggestion.active ? {\n            backgroundColor: '#e2e2e2'\n          } : {\n            backgroundColor: '#ffffff'\n          };\n\n          /*#__PURE__*/\n          _jsxDEV(\"div\", _objectSpread(_objectSpread({}, getSuggestionItemProps(suggestion, {\n            className,\n            style\n          })), {}, {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\nexport default LocationSearchInput;","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/components/InputGooglePlace/index.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Input","LocationWrapper","SearchResultWrapper","LocationSearchInput","props","addressState","setAddressState","address","handleChange","handleSelect","selected","handleAddress","then","results","latLng","handleLocation","catch","error","console","getInputProps","suggestions","getSuggestionItemProps","loading","map","suggestion","className","active","style","backgroundColor","description"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAKA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,eAAP,IAA0BC,mBAA1B,QAAqD,SAArD;;AAEA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,CAAC;AAC/CW,IAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,IAAiB;AADqB,GAAD,CAAhD;;AAIA,QAAMC,YAAY,GAAGD,OAAO,IAAI;AAC9BD,IAAAA,eAAe,iCAAMD,YAAN;AAAoBE,MAAAA;AAApB,OAAf;AACD,GAFD;;AAIA,QAAME,YAAY,GAAGC,QAAQ,IAAI;AAC/BJ,IAAAA,eAAe,iCAAMD,YAAN;AAAoBE,MAAAA,OAAO,EAAEG;AAA7B,OAAf;AACA,UAAMH,OAAO,GAAGG,QAAhB;AACAN,IAAAA,KAAK,CAACO,aAAN,CAAoBJ,OAApB;AACAT,IAAAA,gBAAgB,CAACY,QAAD,CAAhB,CACGE,IADH,CACQC,OAAO,IAAId,SAAS,CAACc,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQE,MAAM,IAAIV,KAAK,CAACW,cAAN,CAAqBD,MAArB,CAFlB,EAGGE,KAHH,CAGSC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHlB;AAID,GARD;;AAUA,sBACE,QAAC,kBAAD;AACE,IAAA,KAAK,EAAEZ,YAAY,CAACE,OADtB;AAEE,IAAA,QAAQ,EAAEC,YAFZ;AAGE,IAAA,QAAQ,EAAEC,YAHZ;AAAA,cAKG,CAAC;AAAEU,MAAAA,aAAF;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA,sBAA9B;AAAsDC,MAAAA;AAAtD,KAAD,kBACC,QAAC,eAAD;AAAA,8BACE;AAAA,+BACE,QAAC,KAAD,kCAAWH,aAAa,EAAxB;AAA4B,UAAA,QAAQ,EAAC,UAArC;AAAgD,UAAA,KAAK,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EAIGd,YAAY,CAACE,OAAb,iBACC,QAAC,mBAAD;AAAqB,QAAA,SAAS,EAAC,iCAA/B;AAAA,mBACGe,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADd,EAEGF,WAAW,CAACG,GAAZ,CAAgBC,UAAU,IAAI;AAC7B,gBAAMC,SAAS,GAAGD,UAAU,CAACE,MAAX,GACd,yBADc,GAEd,iBAFJ;AAGA,gBAAMC,KAAK,GAAGH,UAAU,CAACE,MAAX,GACV;AACEE,YAAAA,eAAe,EAAE;AADnB,WADU,GAIV;AACEA,YAAAA,eAAe,EAAE;AADnB,WAJJ;;AAOA;AAAA,yDACMP,sBAAsB,CAACG,UAAD,EAAa;AACrCC,YAAAA,SADqC;AAErCE,YAAAA;AAFqC,WAAb,CAD5B;AAAA,mCAME;AAAA,wBAAOH,UAAU,CAACK;AAAlB;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AAQD,SAnBA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA3DD;;AA6DA,eAAe1B,mBAAf","sourcesContent":["import React, { useState } from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nimport Input from '../Input';\nimport LocationWrapper, { SearchResultWrapper } from './style';\n\nconst LocationSearchInput = props => {\n  const [addressState, setAddressState] = useState({\n    address: props.address || '',\n  });\n\n  const handleChange = address => {\n    setAddressState({ ...addressState, address });\n  };\n\n  const handleSelect = selected => {\n    setAddressState({ ...addressState, address: selected });\n    const address = selected;\n    props.handleAddress(address);\n    geocodeByAddress(selected)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => props.handleLocation(latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n  return (\n    <PlacesAutocomplete\n      value={addressState.address}\n      onChange={handleChange}\n      onSelect={handleSelect}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <LocationWrapper>\n          <div>\n            <Input {...getInputProps()} required=\"required\" label=\"Location\" />\n          </div>\n          {addressState.address && (\n            <SearchResultWrapper className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                const style = suggestion.active\n                  ? {\n                      backgroundColor: '#e2e2e2',\n                    }\n                  : {\n                      backgroundColor: '#ffffff',\n                    };\n                <div\n                  {...getSuggestionItemProps(suggestion, {\n                    className,\n                    style,\n                  })}\n                >\n                  <span>{suggestion.description}</span>\n                </div>;\n              })}\n            </SearchResultWrapper>\n          )}\n        </LocationWrapper>\n      )}\n    </PlacesAutocomplete>\n  );\n};\n\nexport default LocationSearchInput;\n"]},"metadata":{},"sourceType":"module"}