{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mrcea/Desktop/Nunua/template/packages/web/pages/post/[slug].js\";\nimport SinglePost from '../../containers/SinglePost';\nimport withLayout from '../../hoc/withLayout';\nimport { Modal } from '@redq/reuse-modal';\nimport PageMeta from '../../components/PageMeta';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_POST } from 'core/graphql/Post.query';\nimport { useRouter } from 'next/router';\nimport { withApollo } from '../../helpers/apollo';\nexport default withApollo(withLayout(({\n  isLoggedIn,\n  userId,\n  location\n}) => {\n  const {\n    query: {\n      slug\n    }\n  } = useRouter();\n  let QUERY_VARIABLES = {\n    lat: location && location.lat ? location.lat : null,\n    lng: location && location.lng ? location.lng : null,\n    LIMIT: 4,\n    slug: slug\n  };\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_POST, {\n    variables: QUERY_VARIABLES\n  });\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 23\n  }, this);\n  const title = data && data.post ? data.post.title : '';\n  const content = data && data.post ? data.post.content : '';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageMeta, {\n      title: title,\n      description: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SinglePost, {\n      data: data,\n      loading: loading,\n      userId: userId,\n      isLoggedIn: isLoggedIn,\n      error: error,\n      QUERY_VARIABLES: QUERY_VARIABLES\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}));","map":{"version":3,"sources":["/Users/mrcea/Desktop/Nunua/template/packages/web/pages/post/[slug].js"],"names":["SinglePost","withLayout","Modal","PageMeta","useQuery","GET_POST","useRouter","withApollo","isLoggedIn","userId","location","query","slug","QUERY_VARIABLES","lat","lng","LIMIT","data","loading","error","variables","message","title","post","content"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,6BAAvB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,eAAeA,UAAU,CACvBN,UAAU,CAAC,CAAC;AAAEO,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA;AAAtB,CAAD,KAAsC;AAC/C,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADH,MAEFN,SAAS,EAFb;AAIA,MAAIO,eAAe,GAAG;AACpBC,IAAAA,GAAG,EAAEJ,QAAQ,IAAIA,QAAQ,CAACI,GAArB,GAA2BJ,QAAQ,CAACI,GAApC,GAA0C,IAD3B;AAEpBC,IAAAA,GAAG,EAAEL,QAAQ,IAAIA,QAAQ,CAACK,GAArB,GAA2BL,QAAQ,CAACK,GAApC,GAA0C,IAF3B;AAGpBC,IAAAA,KAAK,EAAE,CAHa;AAIpBJ,IAAAA,IAAI,EAAEA;AAJc,GAAtB;AAOA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2Bf,QAAQ,CAACC,QAAD,EAAW;AAClDe,IAAAA,SAAS,EAAEP;AADuC,GAAX,CAAzC;AAGA,MAAIM,KAAJ,EAAW,oBAAO;AAAA,cAAIA,KAAK,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,QAAMC,KAAK,GAAGL,IAAI,IAAIA,IAAI,CAACM,IAAb,GAAoBN,IAAI,CAACM,IAAL,CAAUD,KAA9B,GAAsC,EAApD;AACA,QAAME,OAAO,GAAGP,IAAI,IAAIA,IAAI,CAACM,IAAb,GAAoBN,IAAI,CAACM,IAAL,CAAUC,OAA9B,GAAwC,EAAxD;AAEA,sBACE;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,KAAjB;AAAwB,MAAA,WAAW,EAAEE;AAArC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AACE,MAAA,IAAI,EAAEP,IADR;AAEE,MAAA,OAAO,EAAEC,OAFX;AAGE,MAAA,MAAM,EAAET,MAHV;AAIE,MAAA,UAAU,EAAED,UAJd;AAKE,MAAA,KAAK,EAAEW,KALT;AAME,MAAA,eAAe,EAAEN;AANnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAcD,CAlCS,CADa,CAAzB","sourcesContent":["import SinglePost from '../../containers/SinglePost';\nimport withLayout from '../../hoc/withLayout';\nimport { Modal } from '@redq/reuse-modal';\nimport PageMeta from '../../components/PageMeta';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_POST } from 'core/graphql/Post.query';\nimport { useRouter } from 'next/router';\nimport { withApollo } from '../../helpers/apollo';\nexport default withApollo(\n  withLayout(({ isLoggedIn, userId, location }) => {\n    const {\n      query: { slug },\n    } = useRouter();\n\n    let QUERY_VARIABLES = {\n      lat: location && location.lat ? location.lat : null,\n      lng: location && location.lng ? location.lng : null,\n      LIMIT: 4,\n      slug: slug,\n    };\n\n    const { data, loading, error } = useQuery(GET_POST, {\n      variables: QUERY_VARIABLES,\n    });\n    if (error) return <p>{error.message}</p>;\n\n    const title = data && data.post ? data.post.title : '';\n    const content = data && data.post ? data.post.content : '';\n\n    return (\n      <>\n        <PageMeta title={title} description={content} />\n        <SinglePost\n          data={data}\n          loading={loading}\n          userId={userId}\n          isLoggedIn={isLoggedIn}\n          error={error}\n          QUERY_VARIABLES={QUERY_VARIABLES}\n        />\n        <Modal />\n      </>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}